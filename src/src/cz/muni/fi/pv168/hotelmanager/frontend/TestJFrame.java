/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.muni.fi.pv168.hotelmanager.frontend;

import cz.muni.fi.pv168.common.HGEConfig;
import cz.muni.fi.pv168.hotelmanager.backend.DuplicateGuestException;
import cz.muni.fi.pv168.hotelmanager.backend.DuplicateRoomException;
import cz.muni.fi.pv168.hotelmanager.backend.Guest;
import cz.muni.fi.pv168.hotelmanager.backend.GuestManager;
import cz.muni.fi.pv168.hotelmanager.backend.GuestManagerImpl;
import cz.muni.fi.pv168.hotelmanager.backend.Reservation;
import cz.muni.fi.pv168.hotelmanager.backend.ReservationManager;
import cz.muni.fi.pv168.hotelmanager.backend.ReservationManagerImpl;
import cz.muni.fi.pv168.hotelmanager.backend.Room;
import cz.muni.fi.pv168.hotelmanager.backend.RoomManager;
import cz.muni.fi.pv168.hotelmanager.backend.RoomManagerImpl;
import cz.muni.fi.pv168.hotelmanager.backend.RoomType;
import cz.muni.fi.pv168.hotelmanager.backend.ServiceFailureException;
import cz.muni.fi.pv168.hotelmanager.backend.TimeManager;
import cz.muni.fi.pv168.hotelmanager.backend.TimeManagerImpl;
import java.awt.CardLayout;
import java.awt.Font;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.DataSource;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.TableModel;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Ondra
 */
public class TestJFrame extends javax.swing.JFrame {

    private static final Logger logger = Logger.getLogger(GuestManagerImpl.class.getName());
    
    private DataSource dataSource;
    private ResourceBundle resourceBundle;
    private GuestsToJTableSwingWorker showAllGuestsSW = null;
    private RoomsToJTableSwingWorker showAllRoomsSW = null;
    private ReservationsToJTableSwingWorker showAllReservationsSW = null;
    private AddNewRoomSwingWorker addNewRoomSwingWorker = null;
    private DeleteRoomSwingWorker deleteRoomSwingWorker = null;
    private UpdateRoomSwingWorker updateRoomSwingWorker = null;
    private SetUpKeySwingWorker setUpKeySwingWorker = null;    
    private SearchRoomSwingWorker searchRoomSwingWorker = null;
    private AddNewGuestSwingWorker addNewGuestSwingWorker = null;
    private DeleteGuestSwingWorker deleteGuestSwingWorker = null;
    private SearchGuestSwingWorker searchGuestSwingWorker = null;
    private UpdateGuestSwingWorker updateGuestSwingWorker = null;
    private AddNewReservationSwingWorker addNewReservationSwingWorker = null;
    private UnoccupiedRoomsSwingWorker unoccupiedRoomsSwingWorker = null;
    private ShowPastReservationsSwingWorker showPastReservationsSwingWorker = null;
    private ShowFutureReservationsSwingWorker showFutureReservationsSwingWorker = null;
    private ShowActualReservationsSwingWorker showActualReservationsSwingWorker = null;
    private ShowTopFiveSpendersSwingWorker showTopFiveSpendersSwingWorker = null;
    private DeleteReservationSwingWorker deleteReservationSwingWorker = null;
    private SearchReservationSwingWorker searchReservationSwingWorker = null;
    private TableRoomRowSwingWorker tableRoomRowSwingWorker = null;
    private TableGuestRowSwingWorker tableGuestRowSwingWorker = null;
    private UpdateReservationSwingWorker updateReservationSwingWorker = null;
    private Long guestKey = null;
    private Long roomKey = null;
    private Long resKey = null;
    private int m_rowGuest = -1;
    private int m_rowRoom = -1;
    private int m_rowReservation = -1;
    private List<Integer> m_rowsRes = null;
    private Date dateFrom = null;
    private Date dateTo = null;
    
    /**
     * Creates new form TestJFrame1
     */
    public TestJFrame() {
        initComponents();
        dataSource = setUpDataSource();
        Locale locale = Locale.getDefault();
        resourceBundle = ResourceBundle.getBundle("texty", locale);
        fulfillAllTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        Evidence = new javax.swing.JTabbedPane();
        RoomEvidence = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRooms = new javax.swing.JTable();
        RoomMenu = new javax.swing.JPanel();
        roomEditButton = new javax.swing.JButton();
        roomNewButton = new javax.swing.JButton();
        roomDeleteButton = new javax.swing.JButton();
        roomShowAllButton = new javax.swing.JButton();
        roomSearchButton = new javax.swing.JButton();
        roomMainPanel = new javax.swing.JPanel();
        emptyPanel = new javax.swing.JPanel();
        roomNewPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        roomNewNumberTextField = new javax.swing.JTextField();
        roomNewNumberLabel = new java.awt.Label();
        roomNewFloorTextField = new javax.swing.JTextField();
        roomNewCancelButton = new javax.swing.JButton();
        roomNewPriceLabel = new java.awt.Label();
        roomNewSaveButton = new javax.swing.JButton();
        roomNewPriceTextField = new javax.swing.JTextField();
        roomNewCapacityTextField = new javax.swing.JTextField();
        roomNewTypeCombo = new javax.swing.JComboBox();
        roomNewTypeLabel = new java.awt.Label();
        roomNewCapacityLabel = new java.awt.Label();
        roomNewFloorLabel = new java.awt.Label();
        roomSearchPanel = new javax.swing.JPanel();
        roomSearchSearchByLabel = new java.awt.Label();
        roomSearchSearchButton = new javax.swing.JButton();
        roomSearchSearchByCombo = new javax.swing.JComboBox();
        roomSearchTypeLabel = new java.awt.Label();
        roomSearchCapacityLabel = new java.awt.Label();
        roomSearchCapacityTextField = new javax.swing.JTextField();
        roomSearchTypeCombo = new javax.swing.JComboBox();
        roomEditPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        roomEditNumberTextField = new javax.swing.JTextField();
        roomEditNumberLabel = new java.awt.Label();
        roomEditFloorTextField = new javax.swing.JTextField();
        roomEditCancelButton = new javax.swing.JButton();
        roomEditPriceLabel = new java.awt.Label();
        roomEditSaveButton = new javax.swing.JButton();
        roomEditPriceTextField = new javax.swing.JTextField();
        roomEditCapacityTextField = new javax.swing.JTextField();
        roomEditTypeCombo = new javax.swing.JComboBox();
        roomEditTypeLabel = new java.awt.Label();
        roomEditCapacityLabel = new java.awt.Label();
        roomEditFloorLabel = new java.awt.Label();
        GuestEvidence = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableGuests = new javax.swing.JTable();
        guestMenuPanel = new javax.swing.JPanel();
        guestEditButton = new javax.swing.JButton();
        guestNewButton = new javax.swing.JButton();
        guestDeleteButton = new javax.swing.JButton();
        guestSearchButton = new javax.swing.JButton();
        guestShowAllButton = new javax.swing.JButton();
        guestMainPanel = new javax.swing.JPanel();
        guestEmptyPanel = new javax.swing.JPanel();
        guestNewPanel = new javax.swing.JPanel();
        guestNewNameLabel = new java.awt.Label();
        guestNewCardIDTextField = new javax.swing.JTextField();
        guestNewNameTextField = new javax.swing.JTextField();
        guestNewDateLabel = new java.awt.Label();
        guestNewPhoneTextField = new javax.swing.JTextField();
        guestNewPhoneLabel = new java.awt.Label();
        guestNewSaveButton = new javax.swing.JButton();
        guestNewCardIDLabel = new java.awt.Label();
        guestNewCancelButton = new javax.swing.JButton();
        guestNewBornDayCombo = new javax.swing.JComboBox();
        guestNewBornMonthCombo = new javax.swing.JComboBox();
        guestNewBornYearCombo = new javax.swing.JComboBox();
        guestSearchPanel = new javax.swing.JPanel();
        guestSearchNameLabel = new java.awt.Label();
        guestSearchSearchButton = new javax.swing.JButton();
        guestSearchNameTextField = new javax.swing.JTextField();
        guestEditPanel = new javax.swing.JPanel();
        guestEditNameLabel = new java.awt.Label();
        guestEditCardIDTextField = new javax.swing.JTextField();
        guestEditNameTextField = new javax.swing.JTextField();
        guestEditDateLabel = new java.awt.Label();
        guestEditPhoneTextField = new javax.swing.JTextField();
        guestEditPhoneLabel = new java.awt.Label();
        guestEditSaveButton = new javax.swing.JButton();
        guestEditCardIDLabel = new java.awt.Label();
        guestEditCancelButton = new javax.swing.JButton();
        guestEditBornYearCombo = new javax.swing.JComboBox();
        guestEditBornMonthCombo = new javax.swing.JComboBox();
        guestEditBornDayCombo = new javax.swing.JComboBox();
        ReservationEvidence = new javax.swing.JPanel();
        reservationMenu = new javax.swing.JPanel();
        reservEditButton = new javax.swing.JButton();
        reservNewButton = new javax.swing.JButton();
        reservDeleteButton = new javax.swing.JButton();
        reservSearchButton = new javax.swing.JButton();
        reservShowAllButton = new javax.swing.JButton();
        reservationMainPanel = new javax.swing.JPanel();
        reservationEmptyPanel = new javax.swing.JPanel();
        reservActualButton = new javax.swing.JButton();
        reservFutureButton = new javax.swing.JButton();
        reservPastButton = new javax.swing.JButton();
        reservationNewStepTwoPanel = new javax.swing.JPanel();
        reservNewStepTwoCancelButton = new javax.swing.JButton();
        reservNewStepTwoSaveButton = new javax.swing.JButton();
        reservNewStepTwoBackButton = new javax.swing.JButton();
        reservationSearchPanel = new javax.swing.JPanel();
        reservSearchSearchByLabel = new java.awt.Label();
        reservSearchSearchButton = new javax.swing.JButton();
        reservSearchSearchByCombo = new javax.swing.JComboBox();
        reservationEditPanel = new javax.swing.JPanel();
        reservEditCancelButton = new javax.swing.JButton();
        reservEditServsSpendsLabel = new java.awt.Label();
        reservEditServsSpendsTextField = new javax.swing.JTextField();
        reservEditExpEndTimeLabel = new java.awt.Label();
        reservEditSaveButton = new javax.swing.JButton();
        reservEditRealEndTimeLabel = new java.awt.Label();
        reservEditStartTimeLabel = new java.awt.Label();
        reservEditStartTimeYearCombo = new javax.swing.JComboBox();
        reservEditStartTimeMonthCombo = new javax.swing.JComboBox();
        reservEditStartTimeDayCombo = new javax.swing.JComboBox();
        reservEditExpEndYearCombo = new javax.swing.JComboBox();
        reservEditExpEndMonthCombo = new javax.swing.JComboBox();
        reservEditExpEndDayCombo = new javax.swing.JComboBox();
        reservEditRealEndYearCombo = new javax.swing.JComboBox();
        reservEditRealEndMonthCombo = new javax.swing.JComboBox();
        reservEditRealEndDayCombo = new javax.swing.JComboBox();
        reservEditRealEndUsageCheckBox = new javax.swing.JCheckBox();
        reservationNewStepOnePanel = new javax.swing.JPanel();
        reservNewDateToLabel = new java.awt.Label();
        reservNewStepOneNextButton = new javax.swing.JButton();
        reservNewDateFromLabel = new java.awt.Label();
        reservNewDateToYearCombo = new javax.swing.JComboBox();
        reservNewDateFromYearCombo = new javax.swing.JComboBox();
        reservNewDateFromDayCombo = new javax.swing.JComboBox();
        reservNewDateFromMonthCombo = new javax.swing.JComboBox();
        reservNewDateToMonthCombo = new javax.swing.JComboBox();
        reservNewDateToDayCombo = new javax.swing.JComboBox();
        reservNewStepOneCancelButton = new javax.swing.JButton();
        reservationTopFiveSpendersPanel = new javax.swing.JPanel();
        reservFutureButtonInActual = new javax.swing.JButton();
        reservPastButtonInActual = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableTopFiveSpenders = new javax.swing.JTable();
        reservTopFiveSpendersLabel = new javax.swing.JLabel();
        reservationTables = new javax.swing.JPanel();
        reservationMainTable = new javax.swing.JScrollPane();
        jTableReservations = new javax.swing.JTable();
        addReservationTables = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableRooms1 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableGuests1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        Menu = new javax.swing.JMenu();
        Exit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hotel guest evidence");

        mainPanel.setBackground(new java.awt.Color(255, 173, 45));

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        label1.setFont(new java.awt.Font("Garamond", 1, 36)); // NOI18N
        label1.setText(GeneralButtonsAndTitlesNamesManager.getAppTitleName());

        Evidence.setFont(new java.awt.Font("Georgia", 1, 11)); // NOI18N

        RoomEvidence.setFocusable(false);
        RoomEvidence.setFont(new java.awt.Font("Georgia", 0, 11)); // NOI18N

        jTableRooms.setModel(new RoomsTableModel());
        jTableRooms.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jTableRooms);

        RoomMenu.setBackground(new java.awt.Color(255, 255, 255));
        RoomMenu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));

        roomEditButton.setText(RoomsButtonsNamesManager.getButtonEditName());
        roomEditButton.setPreferredSize(new java.awt.Dimension(53, 23));
        roomEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomEditButtonActionPerformed(evt);
            }
        });

        roomNewButton.setText(RoomsButtonsNamesManager.getButtonAddName());
        roomNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNewButtonActionPerformed(evt);
            }
        });

        roomDeleteButton.setText(RoomsButtonsNamesManager.getButtonDeleteName());
        roomDeleteButton.setPreferredSize(new java.awt.Dimension(53, 23));
        roomDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomDeleteButtonActionPerformed(evt);
            }
        });

        roomShowAllButton.setText(RoomsButtonsNamesManager.getButtonShowAllName());
        roomShowAllButton.setPreferredSize(new java.awt.Dimension(53, 23));
        roomShowAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomShowAllButtonActionPerformed(evt);
            }
        });

        roomSearchButton.setText(RoomsButtonsNamesManager.getButtonSearchName());
        roomSearchButton.setPreferredSize(new java.awt.Dimension(53, 23));
        roomSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RoomMenuLayout = new javax.swing.GroupLayout(RoomMenu);
        RoomMenu.setLayout(RoomMenuLayout);
        RoomMenuLayout.setHorizontalGroup(
            RoomMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RoomMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RoomMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomNewButton, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(roomDeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(roomEditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(roomSearchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(roomShowAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        RoomMenuLayout.setVerticalGroup(
            RoomMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RoomMenuLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(roomNewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(roomDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(roomEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(roomSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(roomShowAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        roomMainPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout emptyPanelLayout = new javax.swing.GroupLayout(emptyPanel);
        emptyPanel.setLayout(emptyPanelLayout);
        emptyPanelLayout.setHorizontalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 641, Short.MAX_VALUE)
        );
        emptyPanelLayout.setVerticalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 239, Short.MAX_VALUE)
        );

        roomMainPanel.add(emptyPanel, "emptyPanel");

        roomNewNumberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNewNumberTextFieldActionPerformed(evt);
            }
        });

        roomNewNumberLabel.setText(RoomsButtonsNamesManager.getNewAndEditNumberName());

        roomNewCancelButton.setText(GeneralButtonsAndTitlesNamesManager.getCancelButtonName());
        roomNewCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNewCancelButtonActionPerformed(evt);
            }
        });

        roomNewPriceLabel.setText(RoomsButtonsNamesManager.getNewAndEditPriceName());

        roomNewSaveButton.setText(GeneralButtonsAndTitlesNamesManager.getSaveButtonName());
        roomNewSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNewSaveButtonActionPerformed(evt);
            }
        });

        roomNewCapacityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNewCapacityTextFieldActionPerformed(evt);
            }
        });

        roomNewTypeCombo.setModel(ComboBoxManager.setRoomTypeComboBox());

        roomNewTypeLabel.setText(RoomsButtonsNamesManager.getNewAndEditTypeName());

        roomNewCapacityLabel.setText(RoomsButtonsNamesManager.getNewAndEditCapacityName());

        roomNewFloorLabel.setText(RoomsButtonsNamesManager.getNewAndEditFloorName());

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(roomNewSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomNewCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(roomNewTypeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomNewCapacityLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomNewFloorLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomNewNumberLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomNewPriceLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(roomNewFloorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomNewCapacityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomNewNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomNewTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomNewPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(163, 163, 163))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomNewNumberLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomNewNumberTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(roomNewCapacityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomNewCapacityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomNewFloorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomNewFloorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(roomNewTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomNewTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomNewPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomNewPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomNewSaveButton)
                    .addComponent(roomNewCancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout roomNewPanelLayout = new javax.swing.GroupLayout(roomNewPanel);
        roomNewPanel.setLayout(roomNewPanelLayout);
        roomNewPanelLayout.setHorizontalGroup(
            roomNewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomNewPanelLayout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 259, Short.MAX_VALUE))
        );
        roomNewPanelLayout.setVerticalGroup(
            roomNewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomNewPanelLayout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 44, Short.MAX_VALUE))
        );

        roomMainPanel.add(roomNewPanel, "roomNewPanel");

        roomSearchSearchByLabel.setText(RoomsButtonsNamesManager.getSearchConditionName());

        roomSearchSearchButton.setText(GeneralButtonsAndTitlesNamesManager.getSearchButtonName());
        roomSearchSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomSearchSearchButtonActionPerformed(evt);
            }
        });

        roomSearchSearchByCombo.setModel(ComboBoxManager.setRoomSearchConditionComboBox());
        roomSearchSearchByCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomSearchSearchByComboActionPerformed(evt);
            }
        });

        roomSearchTypeLabel.setText(RoomsButtonsNamesManager.getSearchRoomTypeName());

        roomSearchCapacityLabel.setText(RoomsButtonsNamesManager.getSearchRoomCapacityName());

        roomSearchCapacityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomSearchCapacityTextFieldActionPerformed(evt);
            }
        });

        roomSearchTypeCombo.setModel(ComboBoxManager.setRoomTypeComboBox());

        javax.swing.GroupLayout roomSearchPanelLayout = new javax.swing.GroupLayout(roomSearchPanel);
        roomSearchPanel.setLayout(roomSearchPanelLayout);
        roomSearchPanelLayout.setHorizontalGroup(
            roomSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(roomSearchSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(roomSearchPanelLayout.createSequentialGroup()
                        .addGroup(roomSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(roomSearchTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomSearchCapacityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomSearchSearchByLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(roomSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(roomSearchCapacityTextField)
                            .addComponent(roomSearchSearchByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomSearchTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(366, Short.MAX_VALUE))
        );
        roomSearchPanelLayout.setVerticalGroup(
            roomSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomSearchSearchByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomSearchSearchByLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roomSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomSearchCapacityLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomSearchCapacityTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roomSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(roomSearchTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomSearchTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(roomSearchSearchButton)
                .addContainerGap(114, Short.MAX_VALUE))
        );

        roomMainPanel.add(roomSearchPanel, "roomSearchPanel");

        roomEditNumberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomEditNumberTextFieldActionPerformed(evt);
            }
        });

        roomEditNumberLabel.setText(RoomsButtonsNamesManager.getNewAndEditNumberName());

        roomEditCancelButton.setText(GeneralButtonsAndTitlesNamesManager.getCancelButtonName());
        roomEditCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomEditCancelButtonActionPerformed(evt);
            }
        });

        roomEditPriceLabel.setText(RoomsButtonsNamesManager.getNewAndEditPriceName());

        roomEditSaveButton.setText(GeneralButtonsAndTitlesNamesManager.getSaveButtonName());
        roomEditSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomEditSaveButtonActionPerformed(evt);
            }
        });

        roomEditCapacityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomEditCapacityTextFieldActionPerformed(evt);
            }
        });

        roomEditTypeCombo.setModel(ComboBoxManager.setRoomTypeComboBox());

        roomEditTypeLabel.setText(RoomsButtonsNamesManager.getNewAndEditTypeName());

        roomEditCapacityLabel.setText(RoomsButtonsNamesManager.getNewAndEditCapacityName());

        roomEditFloorLabel.setText(RoomsButtonsNamesManager.getNewAndEditFloorName());

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(roomEditSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomEditCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(roomEditTypeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomEditCapacityLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomEditFloorLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomEditNumberLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomEditPriceLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(roomEditFloorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomEditCapacityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomEditNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomEditTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomEditPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(163, 163, 163))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomEditNumberLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomEditNumberTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(roomEditCapacityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomEditCapacityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomEditFloorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomEditFloorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(roomEditTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomEditTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomEditPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomEditPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomEditSaveButton)
                    .addComponent(roomEditCancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout roomEditPanelLayout = new javax.swing.GroupLayout(roomEditPanel);
        roomEditPanel.setLayout(roomEditPanelLayout);
        roomEditPanelLayout.setHorizontalGroup(
            roomEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomEditPanelLayout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 259, Short.MAX_VALUE))
        );
        roomEditPanelLayout.setVerticalGroup(
            roomEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomEditPanelLayout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 43, Short.MAX_VALUE))
        );

        roomMainPanel.add(roomEditPanel, "roomEditPanel");

        javax.swing.GroupLayout RoomEvidenceLayout = new javax.swing.GroupLayout(RoomEvidence);
        RoomEvidence.setLayout(RoomEvidenceLayout);
        RoomEvidenceLayout.setHorizontalGroup(
            RoomEvidenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RoomEvidenceLayout.createSequentialGroup()
                .addComponent(RoomMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RoomEvidenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(roomMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        RoomEvidenceLayout.setVerticalGroup(
            RoomEvidenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RoomEvidenceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(RoomMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        Evidence.addTab(RoomsButtonsNamesManager.getRoomsPanelName(), RoomEvidence);

        jTableGuests.setModel(new GuestsTableModel());
        jTableGuests.setMinimumSize(new java.awt.Dimension(90, 240));
        jTableGuests.setPreferredSize(new java.awt.Dimension(450, 240));
        jScrollPane2.setViewportView(jTableGuests);

        guestMenuPanel.setBackground(new java.awt.Color(255, 255, 255));
        guestMenuPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));
        guestMenuPanel.setPreferredSize(new java.awt.Dimension(128, 287));

        guestEditButton.setText(GuestsButtonsNamesManager.getButtonEditName());
        guestEditButton.setPreferredSize(new java.awt.Dimension(53, 23));
        guestEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestEditButtonActionPerformed(evt);
            }
        });

        guestNewButton.setText(GuestsButtonsNamesManager.getButtonAddName());
        guestNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestNewButtonActionPerformed(evt);
            }
        });

        guestDeleteButton.setText(GuestsButtonsNamesManager.getButtonDeleteName());
        guestDeleteButton.setPreferredSize(new java.awt.Dimension(53, 23));
        guestDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestDeleteButtonActionPerformed(evt);
            }
        });

        guestSearchButton.setText(GuestsButtonsNamesManager.getButtonSearchName());
        guestSearchButton.setPreferredSize(new java.awt.Dimension(53, 23));
        guestSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestSearchButtonActionPerformed(evt);
            }
        });

        guestShowAllButton.setText(GuestsButtonsNamesManager.getButtonShowAllName());
        guestShowAllButton.setPreferredSize(new java.awt.Dimension(53, 23));
        guestShowAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestShowAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout guestMenuPanelLayout = new javax.swing.GroupLayout(guestMenuPanel);
        guestMenuPanel.setLayout(guestMenuPanelLayout);
        guestMenuPanelLayout.setHorizontalGroup(
            guestMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guestMenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(guestMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guestSearchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guestEditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guestDeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guestNewButton, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(guestShowAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        guestMenuPanelLayout.setVerticalGroup(
            guestMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guestMenuPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(guestNewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(guestDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(guestEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(guestSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(guestShowAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        guestMainPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout guestEmptyPanelLayout = new javax.swing.GroupLayout(guestEmptyPanel);
        guestEmptyPanel.setLayout(guestEmptyPanelLayout);
        guestEmptyPanelLayout.setHorizontalGroup(
            guestEmptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 641, Short.MAX_VALUE)
        );
        guestEmptyPanelLayout.setVerticalGroup(
            guestEmptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 239, Short.MAX_VALUE)
        );

        guestMainPanel.add(guestEmptyPanel, "guestEmptyPanel");

        guestNewNameLabel.setText(GuestsButtonsNamesManager.getNewAndEditNameName());

        guestNewCardIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestNewCardIDTextFieldActionPerformed(evt);
            }
        });

        guestNewNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestNewNameTextFieldActionPerformed(evt);
            }
        });

        guestNewDateLabel.setText(GuestsButtonsNamesManager.getNewAndEditBornName());

        guestNewPhoneLabel.setText(GuestsButtonsNamesManager.getNewAndEditPhoneName());

        guestNewSaveButton.setText(GeneralButtonsAndTitlesNamesManager.getSaveButtonName());
        guestNewSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestNewSaveButtonActionPerformed(evt);
            }
        });

        guestNewCardIDLabel.setText(GuestsButtonsNamesManager.getNewAndEditIDCardName());

        guestNewCancelButton.setText(GeneralButtonsAndTitlesNamesManager.getCancelButtonName());
        guestNewCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestNewCancelButtonActionPerformed(evt);
            }
        });

        guestNewBornDayCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        guestNewBornDayCombo.setToolTipText("Day of birth");

        guestNewBornMonthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        guestNewBornYearCombo.setModel(ComboBoxManager.setYearComboBox(1900, 2015));

        javax.swing.GroupLayout guestNewPanelLayout = new javax.swing.GroupLayout(guestNewPanel);
        guestNewPanel.setLayout(guestNewPanelLayout);
        guestNewPanelLayout.setHorizontalGroup(
            guestNewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guestNewPanelLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(guestNewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(guestNewPanelLayout.createSequentialGroup()
                        .addComponent(guestNewSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guestNewCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(guestNewPanelLayout.createSequentialGroup()
                        .addGroup(guestNewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(guestNewCardIDLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(guestNewDateLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(guestNewPhoneLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(guestNewNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(guestNewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, guestNewPanelLayout.createSequentialGroup()
                                .addComponent(guestNewBornDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(guestNewBornMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(guestNewBornYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(guestNewCardIDTextField)
                            .addComponent(guestNewPhoneTextField)
                            .addComponent(guestNewNameTextField))))
                .addGap(325, 325, 325))
        );
        guestNewPanelLayout.setVerticalGroup(
            guestNewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guestNewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(guestNewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(guestNewPanelLayout.createSequentialGroup()
                        .addComponent(guestNewNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(guestNewCardIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(guestNewPanelLayout.createSequentialGroup()
                        .addComponent(guestNewNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(guestNewCardIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(guestNewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guestNewDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(guestNewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(guestNewBornDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(guestNewBornMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(guestNewBornYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addGroup(guestNewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guestNewPhoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guestNewPhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(guestNewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guestNewCancelButton)
                    .addComponent(guestNewSaveButton))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        guestMainPanel.add(guestNewPanel, "guestNewPanel");

        guestSearchNameLabel.setText(GuestsButtonsNamesManager.getSearchConditionName());

        guestSearchSearchButton.setText(GeneralButtonsAndTitlesNamesManager.getSearchButtonName());
        guestSearchSearchButton.setLabel(GeneralButtonsAndTitlesNamesManager.getSearchButtonName());
        guestSearchSearchButton.setPreferredSize(new java.awt.Dimension(74, 23));
        guestSearchSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestSearchSearchButtonActionPerformed(evt);
            }
        });

        guestSearchNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestSearchNameTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout guestSearchPanelLayout = new javax.swing.GroupLayout(guestSearchPanel);
        guestSearchPanel.setLayout(guestSearchPanelLayout);
        guestSearchPanelLayout.setHorizontalGroup(
            guestSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guestSearchPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(guestSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(guestSearchSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(guestSearchPanelLayout.createSequentialGroup()
                        .addComponent(guestSearchNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guestSearchNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(319, Short.MAX_VALUE))
        );
        guestSearchPanelLayout.setVerticalGroup(
            guestSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guestSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(guestSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guestSearchNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guestSearchNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(guestSearchSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(174, Short.MAX_VALUE))
        );

        guestMainPanel.add(guestSearchPanel, "guestSearchPanel");

        guestEditNameLabel.setText(GuestsButtonsNamesManager.getNewAndEditNameName());

        guestEditCardIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestEditCardIDTextFieldActionPerformed(evt);
            }
        });

        guestEditNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestEditNameTextFieldActionPerformed(evt);
            }
        });

        guestEditDateLabel.setText(GuestsButtonsNamesManager.getNewAndEditBornName());

        guestEditPhoneLabel.setText(GuestsButtonsNamesManager.getNewAndEditPhoneName());

        guestEditSaveButton.setText(GeneralButtonsAndTitlesNamesManager.getSaveButtonName());
        guestEditSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestEditSaveButtonActionPerformed(evt);
            }
        });

        guestEditCardIDLabel.setText(GuestsButtonsNamesManager.getNewAndEditIDCardName());

        guestEditCancelButton.setText(GeneralButtonsAndTitlesNamesManager.getCancelButtonName());
        guestEditCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestEditCancelButtonActionPerformed(evt);
            }
        });

        guestEditBornYearCombo.setModel(ComboBoxManager.setYearComboBox(1900, 2015));

        guestEditBornMonthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        guestEditBornDayCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        guestEditBornDayCombo.setToolTipText("Day of birth");

        javax.swing.GroupLayout guestEditPanelLayout = new javax.swing.GroupLayout(guestEditPanel);
        guestEditPanel.setLayout(guestEditPanelLayout);
        guestEditPanelLayout.setHorizontalGroup(
            guestEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guestEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(guestEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(guestEditPanelLayout.createSequentialGroup()
                        .addComponent(guestEditSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guestEditCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(guestEditPanelLayout.createSequentialGroup()
                        .addGroup(guestEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(guestEditPhoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(guestEditCardIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(guestEditNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(guestEditDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addGroup(guestEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, guestEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, guestEditPanelLayout.createSequentialGroup()
                                    .addComponent(guestEditBornDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(14, 14, 14)
                                    .addComponent(guestEditBornMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(guestEditBornYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(guestEditCardIDTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(guestEditNameTextField, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(guestEditPhoneTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(365, Short.MAX_VALUE))
        );
        guestEditPanelLayout.setVerticalGroup(
            guestEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guestEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(guestEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guestEditNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guestEditNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(guestEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(guestEditCardIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guestEditCardIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(guestEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guestEditDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(guestEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(guestEditBornDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(guestEditBornMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(guestEditBornYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(guestEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guestEditPhoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guestEditPhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(guestEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guestEditCancelButton)
                    .addComponent(guestEditSaveButton))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        guestMainPanel.add(guestEditPanel, "guestEditPanel");

        javax.swing.GroupLayout GuestEvidenceLayout = new javax.swing.GroupLayout(GuestEvidence);
        GuestEvidence.setLayout(GuestEvidenceLayout);
        GuestEvidenceLayout.setHorizontalGroup(
            GuestEvidenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GuestEvidenceLayout.createSequentialGroup()
                .addComponent(guestMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(GuestEvidenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guestMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        GuestEvidenceLayout.setVerticalGroup(
            GuestEvidenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GuestEvidenceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guestMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(guestMenuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
        );

        Evidence.addTab(GuestsButtonsNamesManager.getGuestsPanelName(), GuestEvidence);

        reservationMenu.setBackground(new java.awt.Color(255, 255, 255));
        reservationMenu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));
        reservationMenu.setPreferredSize(new java.awt.Dimension(128, 287));

        reservEditButton.setText(ReservationsButtonsNamesManager.getButtonEditName());
        reservEditButton.setPreferredSize(new java.awt.Dimension(53, 23));
        reservEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservEditButtonActionPerformed(evt);
            }
        });

        reservNewButton.setText(ReservationsButtonsNamesManager.getButtonAddName());
        reservNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservNewButtonActionPerformed(evt);
            }
        });

        reservDeleteButton.setText(ReservationsButtonsNamesManager.getButtonDeleteName());
        reservDeleteButton.setPreferredSize(new java.awt.Dimension(53, 23));
        reservDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservDeleteButtonActionPerformed(evt);
            }
        });

        reservSearchButton.setText(ReservationsButtonsNamesManager.getButtonSearchName());
        reservSearchButton.setPreferredSize(new java.awt.Dimension(53, 23));
        reservSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservSearchButtonActionPerformed(evt);
            }
        });

        reservShowAllButton.setText(ReservationsButtonsNamesManager.getButtonShowAllName());
        reservShowAllButton.setPreferredSize(new java.awt.Dimension(53, 23));
        reservShowAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservShowAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reservationMenuLayout = new javax.swing.GroupLayout(reservationMenu);
        reservationMenu.setLayout(reservationMenuLayout);
        reservationMenuLayout.setHorizontalGroup(
            reservationMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservationMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reservNewButton, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(reservDeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reservSearchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reservEditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reservShowAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        reservationMenuLayout.setVerticalGroup(
            reservationMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationMenuLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(reservNewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reservDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reservEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reservSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(reservShowAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        reservationMainPanel.setLayout(new java.awt.CardLayout());

        reservActualButton.setText(ReservationsButtonsNamesManager.getButtonActualName());
        reservActualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservActualButtonActionPerformed(evt);
            }
        });

        reservFutureButton.setText(ReservationsButtonsNamesManager.getButtonFutureName());
        reservFutureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservFutureButtonActionPerformed(evt);
            }
        });

        reservPastButton.setText(ReservationsButtonsNamesManager.getButtonPastName());
        reservPastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservPastButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reservationEmptyPanelLayout = new javax.swing.GroupLayout(reservationEmptyPanel);
        reservationEmptyPanel.setLayout(reservationEmptyPanelLayout);
        reservationEmptyPanelLayout.setHorizontalGroup(
            reservationEmptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationEmptyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reservPastButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reservActualButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reservFutureButton)
                .addContainerGap(314, Short.MAX_VALUE))
        );
        reservationEmptyPanelLayout.setVerticalGroup(
            reservationEmptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationEmptyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservationEmptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reservPastButton)
                    .addComponent(reservActualButton)
                    .addComponent(reservFutureButton))
                .addContainerGap(211, Short.MAX_VALUE))
        );

        reservationMainPanel.add(reservationEmptyPanel, "reservationEmptyPanel");

        reservNewStepTwoCancelButton.setText(GeneralButtonsAndTitlesNamesManager.getCancelButtonName());
        reservNewStepTwoCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservNewStepTwoCancelButtonActionPerformed(evt);
            }
        });

        reservNewStepTwoSaveButton.setText(GeneralButtonsAndTitlesNamesManager.getSaveButtonName());
        reservNewStepTwoSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservNewStepTwoSaveButtonActionPerformed(evt);
            }
        });

        reservNewStepTwoBackButton.setText(GeneralButtonsAndTitlesNamesManager.getBackButtonName());
        reservNewStepTwoBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservNewStepTwoBackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reservationNewStepTwoPanelLayout = new javax.swing.GroupLayout(reservationNewStepTwoPanel);
        reservationNewStepTwoPanel.setLayout(reservationNewStepTwoPanelLayout);
        reservationNewStepTwoPanelLayout.setHorizontalGroup(
            reservationNewStepTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationNewStepTwoPanelLayout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(reservNewStepTwoBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reservNewStepTwoSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reservNewStepTwoCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(207, Short.MAX_VALUE))
        );
        reservationNewStepTwoPanelLayout.setVerticalGroup(
            reservationNewStepTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reservationNewStepTwoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservationNewStepTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reservNewStepTwoSaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reservNewStepTwoBackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reservNewStepTwoCancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(73, 73, 73))
        );

        reservationMainPanel.add(reservationNewStepTwoPanel, "reservationNewPanel");

        reservSearchSearchByLabel.setText(ReservationsButtonsNamesManager.getSearchSearchByName());

        reservSearchSearchButton.setText(GeneralButtonsAndTitlesNamesManager.getSearchButtonName());
        reservSearchSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservSearchSearchButtonActionPerformed(evt);
            }
        });

        reservSearchSearchByCombo.setModel(ComboBoxManager.setReservationSearchConditionComboBox());
        reservSearchSearchByCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservSearchSearchByComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reservationSearchPanelLayout = new javax.swing.GroupLayout(reservationSearchPanel);
        reservationSearchPanel.setLayout(reservationSearchPanelLayout);
        reservationSearchPanelLayout.setHorizontalGroup(
            reservationSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservationSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(reservSearchSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(reservationSearchPanelLayout.createSequentialGroup()
                        .addComponent(reservSearchSearchByLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reservSearchSearchByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(366, Short.MAX_VALUE))
        );
        reservationSearchPanelLayout.setVerticalGroup(
            reservationSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservationSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reservSearchSearchByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reservSearchSearchByLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reservSearchSearchButton)
                .addContainerGap(180, Short.MAX_VALUE))
        );

        reservationMainPanel.add(reservationSearchPanel, "reservationSearchPanel");

        reservEditCancelButton.setText(GeneralButtonsAndTitlesNamesManager.getCancelButtonName());
        reservEditCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservEditCancelButtonActionPerformed(evt);
            }
        });

        reservEditServsSpendsLabel.setText(ReservationsButtonsNamesManager.getServicesSpendingsName());

        reservEditExpEndTimeLabel.setText(ReservationsButtonsNamesManager.getExpectedEndName());

        reservEditSaveButton.setText(GeneralButtonsAndTitlesNamesManager.getSaveButtonName());
        reservEditSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservEditSaveButtonActionPerformed(evt);
            }
        });

        reservEditRealEndTimeLabel.setText(ReservationsButtonsNamesManager.getRealEndName());

        reservEditStartTimeLabel.setText(ReservationsButtonsNamesManager.getStartTimeName());

        reservEditStartTimeYearCombo.setModel(ComboBoxManager.setYearComboBox(2015, 2100));

        reservEditStartTimeMonthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        reservEditStartTimeDayCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        reservEditStartTimeDayCombo.setToolTipText("Day of birth");

        reservEditExpEndYearCombo.setModel(ComboBoxManager.setYearComboBox(2015, 2100));

        reservEditExpEndMonthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        reservEditExpEndDayCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        reservEditExpEndDayCombo.setToolTipText("Day of birth");

        reservEditRealEndYearCombo.setModel(ComboBoxManager.setYearComboBox(2015, 2100));

        reservEditRealEndMonthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        reservEditRealEndDayCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        reservEditRealEndDayCombo.setToolTipText("Day of birth");

        reservEditRealEndUsageCheckBox.setText(ReservationsButtonsNamesManager.getRealEndCheckBoxName());

        javax.swing.GroupLayout reservationEditPanelLayout = new javax.swing.GroupLayout(reservationEditPanel);
        reservationEditPanel.setLayout(reservationEditPanelLayout);
        reservationEditPanelLayout.setHorizontalGroup(
            reservationEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservationEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(reservEditExpEndTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reservEditRealEndTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reservEditStartTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reservEditServsSpendsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reservationEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reservationEditPanelLayout.createSequentialGroup()
                        .addComponent(reservEditStartTimeDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(reservEditStartTimeMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(reservEditStartTimeYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(reservationEditPanelLayout.createSequentialGroup()
                        .addComponent(reservEditExpEndDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(reservEditExpEndMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(reservEditExpEndYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(reservationEditPanelLayout.createSequentialGroup()
                        .addComponent(reservEditRealEndDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(reservEditRealEndMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(reservEditRealEndYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(reservEditRealEndUsageCheckBox))
                    .addGroup(reservationEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(reservationEditPanelLayout.createSequentialGroup()
                            .addComponent(reservEditSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(reservEditCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(reservEditServsSpendsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(260, Short.MAX_VALUE))
        );
        reservationEditPanelLayout.setVerticalGroup(
            reservationEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservationEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(reservationEditPanelLayout.createSequentialGroup()
                        .addGroup(reservationEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reservEditStartTimeDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reservEditStartTimeMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reservEditStartTimeYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(reservationEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reservEditExpEndDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reservEditExpEndMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reservEditExpEndYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(reservationEditPanelLayout.createSequentialGroup()
                        .addComponent(reservEditStartTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reservEditExpEndTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reservationEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reservEditRealEndTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(reservationEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(reservEditRealEndDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(reservEditRealEndMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(reservEditRealEndYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(reservEditRealEndUsageCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reservationEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reservEditServsSpendsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reservEditServsSpendsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(reservationEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(reservEditCancelButton)
                    .addComponent(reservEditSaveButton))
                .addContainerGap(87, Short.MAX_VALUE))
        );

        reservationMainPanel.add(reservationEditPanel, "reservationEditPanel");

        reservNewDateToLabel.setText(ReservationsButtonsNamesManager.getDateToName());

        reservNewStepOneNextButton.setText(GeneralButtonsAndTitlesNamesManager.getNextButtonName());
        reservNewStepOneNextButton.setPreferredSize(new java.awt.Dimension(74, 23));
        reservNewStepOneNextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservNewStepOneNextButtonActionPerformed(evt);
            }
        });

        reservNewDateFromLabel.setText(ReservationsButtonsNamesManager.getDateFromName());

        reservNewDateToYearCombo.setModel(ComboBoxManager.setYearComboBox(2015, 2100)
        );

        reservNewDateFromYearCombo.setModel(ComboBoxManager.setYearComboBox(2015, 2100)
        );
        reservNewDateFromYearCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservNewDateFromYearComboActionPerformed(evt);
            }
        });

        reservNewDateFromDayCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        reservNewDateFromDayCombo.setToolTipText("Day of birth");
        reservNewDateFromDayCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservNewDateFromDayComboActionPerformed(evt);
            }
        });

        reservNewDateFromMonthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        reservNewDateToMonthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        reservNewDateToDayCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        reservNewDateToDayCombo.setToolTipText("Day of birth");

        reservNewStepOneCancelButton.setText(GeneralButtonsAndTitlesNamesManager.getCancelButtonName());
        reservNewStepOneCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservNewStepOneCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reservationNewStepOnePanelLayout = new javax.swing.GroupLayout(reservationNewStepOnePanel);
        reservationNewStepOnePanel.setLayout(reservationNewStepOnePanelLayout);
        reservationNewStepOnePanelLayout.setHorizontalGroup(
            reservationNewStepOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationNewStepOnePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservationNewStepOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(reservationNewStepOnePanelLayout.createSequentialGroup()
                        .addComponent(reservNewStepOneNextButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reservNewStepOneCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(reservationNewStepOnePanelLayout.createSequentialGroup()
                        .addGroup(reservationNewStepOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(reservNewDateToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reservNewDateFromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(reservationNewStepOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(reservationNewStepOnePanelLayout.createSequentialGroup()
                                .addComponent(reservNewDateToDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(reservNewDateToMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(reservNewDateToYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(reservationNewStepOnePanelLayout.createSequentialGroup()
                                .addComponent(reservNewDateFromDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(reservNewDateFromMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(reservNewDateFromYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(357, Short.MAX_VALUE))
        );
        reservationNewStepOnePanelLayout.setVerticalGroup(
            reservationNewStepOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationNewStepOnePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservationNewStepOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(reservationNewStepOnePanelLayout.createSequentialGroup()
                        .addComponent(reservNewDateFromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(reservNewDateToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(reservationNewStepOnePanelLayout.createSequentialGroup()
                        .addGroup(reservationNewStepOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reservNewDateFromDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reservNewDateFromMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reservNewDateFromYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(reservationNewStepOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reservNewDateToDayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reservNewDateToMonthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reservNewDateToYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)))
                .addGap(11, 11, 11)
                .addGroup(reservationNewStepOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(reservNewStepOneCancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reservNewStepOneNextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(148, Short.MAX_VALUE))
        );

        reservationMainPanel.add(reservationNewStepOnePanel, "roomAvailabilityPanel");

        reservFutureButtonInActual.setText(ReservationsButtonsNamesManager.getButtonFutureName());
        reservFutureButtonInActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservFutureButtonInActualActionPerformed(evt);
            }
        });

        reservPastButtonInActual.setText(ReservationsButtonsNamesManager.getButtonPastName());
        reservPastButtonInActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservPastButtonInActualActionPerformed(evt);
            }
        });

        jTableTopFiveSpenders.setModel(new TopFiveSpendersTableModel());
        jScrollPane4.setViewportView(jTableTopFiveSpenders);

        reservTopFiveSpendersLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        reservTopFiveSpendersLabel.setText(TopFiveSpendersButtonsNamesManager.getTitleTopFiveSpendersName());

        javax.swing.GroupLayout reservationTopFiveSpendersPanelLayout = new javax.swing.GroupLayout(reservationTopFiveSpendersPanel);
        reservationTopFiveSpendersPanel.setLayout(reservationTopFiveSpendersPanelLayout);
        reservationTopFiveSpendersPanelLayout.setHorizontalGroup(
            reservationTopFiveSpendersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
            .addGroup(reservationTopFiveSpendersPanelLayout.createSequentialGroup()
                .addComponent(reservPastButtonInActual)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reservFutureButtonInActual)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(reservationTopFiveSpendersPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(reservTopFiveSpendersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        reservationTopFiveSpendersPanelLayout.setVerticalGroup(
            reservationTopFiveSpendersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reservationTopFiveSpendersPanelLayout.createSequentialGroup()
                .addComponent(reservTopFiveSpendersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(reservationTopFiveSpendersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reservPastButtonInActual)
                    .addComponent(reservFutureButtonInActual))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        reservationMainPanel.add(reservationTopFiveSpendersPanel, "reservationTopFiveSpendersPanel");
        reservationTopFiveSpendersPanel.getAccessibleContext().setAccessibleName("reservationTopFiveSpendersPanel");

        reservationTables.setLayout(new java.awt.CardLayout());

        jTableReservations.setModel(new ReservationsTableModel());
        jTableReservations.setPreferredSize(new java.awt.Dimension(450, 240));
        reservationMainTable.setViewportView(jTableReservations);

        reservationTables.add(reservationMainTable, "reservationMainTable");
        reservationMainTable.getAccessibleContext().setAccessibleName("reservationMainTable");

        jTableRooms1.setModel(new RoomsTableModel());
        jTableRooms1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane3.setViewportView(jTableRooms1);

        jTableGuests1.setModel(new GuestsTableModel());
        jTableGuests1.setMinimumSize(new java.awt.Dimension(90, 240));
        jTableGuests1.setPreferredSize(new java.awt.Dimension(450, 240));
        jScrollPane5.setViewportView(jTableGuests1);

        javax.swing.GroupLayout addReservationTablesLayout = new javax.swing.GroupLayout(addReservationTables);
        addReservationTables.setLayout(addReservationTablesLayout);
        addReservationTablesLayout.setHorizontalGroup(
            addReservationTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addReservationTablesLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))
        );
        addReservationTablesLayout.setVerticalGroup(
            addReservationTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addReservationTablesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addReservationTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        reservationTables.add(addReservationTables, "addReservationTables");
        addReservationTables.getAccessibleContext().setAccessibleName("addReservationTables");

        javax.swing.GroupLayout ReservationEvidenceLayout = new javax.swing.GroupLayout(ReservationEvidence);
        ReservationEvidence.setLayout(ReservationEvidenceLayout);
        ReservationEvidenceLayout.setHorizontalGroup(
            ReservationEvidenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReservationEvidenceLayout.createSequentialGroup()
                .addComponent(reservationMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReservationEvidenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reservationTables, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reservationMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        ReservationEvidenceLayout.setVerticalGroup(
            ReservationEvidenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReservationEvidenceLayout.createSequentialGroup()
                .addComponent(reservationTables, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reservationMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(reservationMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
        );

        reservationTables.getAccessibleContext().setAccessibleName("reservationTables");

        Evidence.addTab(ReservationsButtonsNamesManager.getReservationsPanelName(), ReservationEvidence);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Evidence, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Evidence)
                .addContainerGap())
        );

        Menu.setText(GeneralButtonsAndTitlesNamesManager.getMenuBarMenuName());

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        Exit.setText(GeneralButtonsAndTitlesNamesManager.getMenuBarMenuExitName());
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        Menu.add(Exit);

        jMenuBar1.add(Menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guestDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestDeleteButtonActionPerformed
        // TODO deleting guest
        if(deleteGuestSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'guestMenuDeleteActionPerformed' of class 'TestJFrame' - deleting guest from DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'guestMenuDeleteActionPerformed' of class 'TestJFrame' - deleting guest from DB operation is already in progress, can't run multiply");
        }
        guestDeleteButton.setEnabled(false);
        guestNewButton.setEnabled(false);
        guestEditButton.setEnabled(false);
        guestSearchButton.setEnabled(false);
        guestShowAllButton.setEnabled(false);
        jTableGuests.setRowSelectionAllowed(false);
        int choice = makeAGuestDeletionChoice(jTableGuests);
        
        if(choice == 0){
            deleteGuestSwingWorker = new DeleteGuestSwingWorker();
            deleteGuestSwingWorker.execute();
        }else{
            guestDeleteButton.setEnabled(true);
            guestNewButton.setEnabled(true);
            guestEditButton.setEnabled(true);
            guestSearchButton.setEnabled(true);
            guestShowAllButton.setEnabled(true);
            jTableGuests.setRowSelectionAllowed(true);
        }
        
        CardLayout card = (CardLayout)guestMainPanel.getLayout();
        card.show(guestMainPanel, "guestEmptyPanel");
    }//GEN-LAST:event_guestDeleteButtonActionPerformed

    private void guestSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestSearchButtonActionPerformed
        
        if(!guestSearchNameTextField.getText().isEmpty()){ guestSearchNameTextField.setText(""); }
        
        CardLayout card = (CardLayout)guestMainPanel.getLayout();
        card.show(guestMainPanel, "guestSearchPanel");
    }//GEN-LAST:event_guestSearchButtonActionPerformed

    private void reservDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservDeleteButtonActionPerformed
        // TODO deleting reservation
        if(deleteReservationSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'reservDeleteButtonActionPerformed' of class 'TestJFrame' - deleting reservation from DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservDeleteButtonActionPerformed' of class 'TestJFrame' - deleting reservation from DB operation is already in progress, can't run multiply");
        }
        reservDeleteButton.setEnabled(false);
        reservNewButton.setEnabled(false);
        reservEditButton.setEnabled(false);
        reservSearchButton.setEnabled(false);
        reservShowAllButton.setEnabled(false);
        jTableReservations.setRowSelectionAllowed(false);
        int choice = makeAReservationDeletionChoice(jTableReservations);
        
        if(choice == 0){
            deleteReservationSwingWorker = new DeleteReservationSwingWorker();
            deleteReservationSwingWorker.execute();
        }else{
            reservDeleteButton.setEnabled(true);
            reservNewButton.setEnabled(true);
            reservEditButton.setEnabled(true);
            reservSearchButton.setEnabled(true);
            reservShowAllButton.setEnabled(true);
            jTableReservations.setRowSelectionAllowed(true);
        }
        
        /*CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationEmptyPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "reservationMainTable");*/
    }//GEN-LAST:event_reservDeleteButtonActionPerformed

    private void reservSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservSearchButtonActionPerformed
        
        reservSearchSearchByCombo.setSelectedIndex(0);        
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationSearchPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "addReservationTables");
    }//GEN-LAST:event_reservSearchButtonActionPerformed

    private void guestShowAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestShowAllButtonActionPerformed
        
        if(showAllRoomsSW != null){
            logger.log(Level.SEVERE, "Error in method 'guestMenuShowAllActionPerformed' of class 'TestJFrame' - retrieving all guests from DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'guestMenuShowAllActionPerformed' of class 'TestJFrame' - retrieving all guests from DB operation is already in progress, can't run multiply");
        }
        guestShowAllButton.setEnabled(false);
        showAllGuestsSW = new GuestsToJTableSwingWorker(jTableGuests.getModel());
        GuestsTableModel guestsTableModel = (GuestsTableModel)jTableGuests.getModel();
        
        guestsTableModel.removeAllGuestsOnlyVisually();
        showAllGuestsSW.execute();
        
        CardLayout card = (CardLayout)guestMainPanel.getLayout();
        card.show(guestMainPanel, "guestEmptyPanel");
    }//GEN-LAST:event_guestShowAllButtonActionPerformed

    private void reservShowAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservShowAllButtonActionPerformed
        // TODO show all
        if(showAllReservationsSW != null){
            logger.log(Level.SEVERE, "Error in method 'reservShowAllButtonActionPerformed' of class 'TestJFrame' - retrieving all reservationss from DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservShowAllButtonActionPerformed' of class 'TestJFrame' - retrieving all reservations from DB operation is already in progress, can't run multiply");
        }
        reservShowAllButton.setEnabled(false);        
        showAllReservationsSW = new ReservationsToJTableSwingWorker(jTableReservations.getModel());
        ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
        
        reservationsTableModel.removeAllReservationsOnlyVisually();
        showAllReservationsSW.execute();
        
        reservNewButton.setEnabled(true);
        reservEditButton.setEnabled(true);
        reservDeleteButton.setEnabled(true);
        reservSearchButton.setEnabled(true);
        
        jTableGuests1.setRowSelectionAllowed(true);
        jTableRooms1.setRowSelectionAllowed(true);
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationEmptyPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "reservationMainTable");
    }//GEN-LAST:event_reservShowAllButtonActionPerformed

    private void roomNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNewButtonActionPerformed
        //clear the last used values for add function
        if(!roomNewNumberTextField.getText().isEmpty()){ roomNewNumberTextField.setText(""); }
        if(!roomNewCapacityTextField.getText().isEmpty()){ roomNewCapacityTextField.setText(""); }
        if(!roomNewFloorTextField.getText().isEmpty()){ roomNewFloorTextField.setText(""); }
        roomNewTypeCombo.setSelectedIndex(0);
        if(!roomNewPriceTextField.getText().isEmpty()){ roomNewPriceTextField.setText(""); }
        
        roomDeleteButton.setEnabled(false);
        roomEditButton.setEnabled(false);
        roomSearchButton.setEnabled(false);
        
        CardLayout card = (CardLayout)roomMainPanel.getLayout();
        card.show(roomMainPanel, "roomNewPanel");
    }//GEN-LAST:event_roomNewButtonActionPerformed

    private void roomSearchSearchByComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomSearchSearchByComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomSearchSearchByComboActionPerformed

    private void roomSearchCapacityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomSearchCapacityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomSearchCapacityTextFieldActionPerformed

    private void roomEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomEditButtonActionPerformed
        
        if(setUpKeySwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'RoomEditButtonActionPerformed' of class 'TestJFrame' - preparation for updating room in DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'RoomEditButtonActionPerformed' of class 'TestJFrame' - preparation for updating room in DB operation is already in progress, can't run multiply");
        }
        
        roomEditButton.setEnabled(false);
        roomNewButton.setEnabled(false);
        roomDeleteButton.setEnabled(false);
        roomSearchButton.setEnabled(false);
        roomShowAllButton.setEnabled(false);
        
        if(jTableRooms.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Pokoj_upravit_nevybrany_zaznam"),
                                          resourceBundle.getString("Chybna_operace"), JOptionPane.ERROR_MESSAGE);            
            
            roomEditButton.setEnabled(true);
            roomNewButton.setEnabled(true);
            roomDeleteButton.setEnabled(true);
            roomSearchButton.setEnabled(true);
            roomShowAllButton.setEnabled(true);
            
            CardLayout card = (CardLayout)roomMainPanel.getLayout();
            card.show(roomMainPanel, "emptyPanel");
        }else{
            roomShowAllButton.setEnabled(true);
            m_rowRoom = jTableRooms.getSelectedRow();
            if(roomKey != null){
                roomKey = null;
            }
            
            Room room = getRoomFromTable(jTableRooms);
            roomEditNumberTextField.setText(room.getNumber());
            roomEditCapacityTextField.setText(String.valueOf(room.getCapacity()));
            roomEditFloorTextField.setText(String.valueOf(room.getFloor()));
            roomEditTypeCombo.setSelectedIndex(getRoomTypeIndex(room.getType()));
            roomEditPriceTextField.setText(String.valueOf(room.getPrice()));
            
            setUpKeySwingWorker = new SetUpKeySwingWorker(room);
            setUpKeySwingWorker.execute();
            
            CardLayout card = (CardLayout)roomMainPanel.getLayout();
            card.show(roomMainPanel, "roomEditPanel");
        }
    }//GEN-LAST:event_roomEditButtonActionPerformed

    private void roomSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomSearchButtonActionPerformed
        
        if(roomSearchSearchByCombo.getSelectedIndex() != 0){ roomSearchSearchByCombo.setSelectedIndex(0); }
        if(!roomSearchCapacityTextField.getText().isEmpty()){ roomSearchCapacityTextField.setText(""); }
        if(roomSearchTypeCombo.getSelectedIndex() != 0){ roomSearchTypeCombo.setSelectedIndex(0); }
        
        CardLayout card = (CardLayout)roomMainPanel.getLayout();
        card.show(roomMainPanel, "roomSearchPanel");
    }//GEN-LAST:event_roomSearchButtonActionPerformed

    private void roomNewCapacityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNewCapacityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomNewCapacityTextFieldActionPerformed

    private void roomNewNumberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNewNumberTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomNewNumberTextFieldActionPerformed

    private void roomShowAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomShowAllButtonActionPerformed
        
        if(showAllRoomsSW != null){
            logger.log(Level.SEVERE, "Error in method 'RoomShowAllButtonActionPerformed' of class 'TestJFrame' - retrieving all rooms from DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'RoomShowAllButtonActionPerformed' of class 'TestJFrame' - retrieving all rooms from DB operation is already in progress, can't run multiply");
        }
        roomShowAllButton.setEnabled(false);        
        showAllRoomsSW = new RoomsToJTableSwingWorker(jTableRooms.getModel());
        RoomsTableModel roomsTableModel = (RoomsTableModel)jTableRooms.getModel();
        
        roomsTableModel.removeAllRoomsOnlyVisually();
        showAllRoomsSW.execute();
        
        CardLayout card = (CardLayout)roomMainPanel.getLayout();
        card.show(roomMainPanel, "emptyPanel");
    }//GEN-LAST:event_roomShowAllButtonActionPerformed

    private void roomDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomDeleteButtonActionPerformed
        if(deleteRoomSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'RoomDeleteButtonActionPerformed' of class 'TestJFrame' - deleting room from DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'RoomDeleteButtonActionPerformed' of class 'TestJFrame' - deleting room from DB operation is already in progress, can't run multiply");
        }
        roomDeleteButton.setEnabled(false);
        roomNewButton.setEnabled(false);
        roomEditButton.setEnabled(false);
        roomSearchButton.setEnabled(false);
        roomShowAllButton.setEnabled(false);
        jTableRooms.setRowSelectionAllowed(false);
        int choice = makeARoomDeletionChoice(jTableRooms);
        
        if(choice == 0){
            deleteRoomSwingWorker = new DeleteRoomSwingWorker();
            deleteRoomSwingWorker.execute();
        }else{
            roomDeleteButton.setEnabled(true);
            roomNewButton.setEnabled(true);
            roomEditButton.setEnabled(true);
            roomSearchButton.setEnabled(true);
            roomShowAllButton.setEnabled(true);
            jTableRooms.setRowSelectionAllowed(true);
        }
        
        CardLayout card = (CardLayout)roomMainPanel.getLayout();
        card.show(roomMainPanel, "emptyPanel");
    }//GEN-LAST:event_roomDeleteButtonActionPerformed

    private void roomNewSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNewSaveButtonActionPerformed
        //TODO co se stane po zmakcnuti tohoto tlacitka jestli jeste nejaka zprava nebo neco
        if(addNewRoomSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'roomNewSaveButActionPerformed' of class 'TestJFrame' - saving room to DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'roomNewSaveButActionPerformed' of class 'TestJFrame' - saving room to DB operation is already in progress, can't run multiply");
        }
        roomNewSaveButton.setEnabled(false);
        String[] inVals = {roomNewNumberTextField.getText(), roomNewCapacityTextField.getText(),
                           roomNewFloorTextField.getText(), getStringRoomType(roomNewTypeCombo.getSelectedItem().toString()),
                           roomNewPriceTextField.getText()};
        String msgs = checkAllRoomValuesWereFilledOut(inVals);
        if(msgs == null){
            addNewRoomSwingWorker = new AddNewRoomSwingWorker(inVals);
            try{
                addNewRoomSwingWorker.execute();
            }catch(IllegalArgumentException ex){
                logger.log(Level.SEVERE, "AddNewRoomSwingWorker - error during adding new room to DB -> ", ex);
                JOptionPane.showMessageDialog(null, getInvalidRoomArgMsg(ex.getMessage(),"pridat"),
                                              resourceBundle.getString("Neplatny_argument"),
                                              JOptionPane.ERROR_MESSAGE);
            }catch(DuplicateRoomException ex){
                logger.log(Level.SEVERE, "AddNewRoomSwingWorker - error during adding new room to DB -> ", ex);
                JOptionPane.showMessageDialog(null, getDuplRoomMsg(ex.getMessage()), resourceBundle.getString("Neplatny_argument"),
                                              JOptionPane.ERROR_MESSAGE);
            }catch(ServiceFailureException ex){
                logger.log(Level.SEVERE, "AddNewRoomSwingWorker - error during adding new room to DB -> ", ex);
                JOptionPane.showMessageDialog(null,resourceBundle.getString("Pokoj_pridat_interni_chyba"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);            
            }
        }else{
            roomNewSaveButton.setEnabled(true);
            JOptionPane.showMessageDialog(null, msgs, resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_roomNewSaveButtonActionPerformed

    private void roomNewCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNewCancelButtonActionPerformed
        // TODO add your handling code here:
        roomDeleteButton.setEnabled(true);
        roomEditButton.setEnabled(true);
        roomSearchButton.setEnabled(true);
        
        CardLayout card = (CardLayout)roomMainPanel.getLayout();
        card.show(roomMainPanel, "emptyPanel");
    }//GEN-LAST:event_roomNewCancelButtonActionPerformed

    private void roomSearchSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomSearchSearchButtonActionPerformed
        
        if(searchRoomSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'roomSearchButActionPerformed' of class 'TestJFrame' - searching suitable rooms in DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'roomSearchButActionPerformed' of class 'TestJFrame' - searching suitable rooms in DB operation is already in progress, can't run multiply");
        }
        roomSearchSearchButton.setEnabled(false);
        int capacity = -1;
        String roomType = null;
        switch(roomSearchSearchByCombo.getSelectedIndex()){
            case 0:{
                if(roomSearchCapacityTextField.getText().trim().isEmpty()){
                    roomSearchSearchButton.setEnabled(true);
                    JOptionPane.showMessageDialog(null, resourceBundle.getString("Pokoj_hledat_spatny_vstup_kapacita"),
                                                  resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
                }else{
                    capacity = Integer.parseInt(roomSearchCapacityTextField.getText());
                    searchRoomSwingWorker = new SearchRoomSwingWorker(capacity, roomType);
                    searchRoomSwingWorker.execute();
                }
                break;
            }
            case 1:{
                roomType = getStringRoomType(roomSearchTypeCombo.getSelectedItem().toString());
                searchRoomSwingWorker = new SearchRoomSwingWorker(capacity, roomType);
                searchRoomSwingWorker.execute();
                break;
            } 
            case 2:{
                if(roomSearchCapacityTextField.getText().trim().isEmpty()){
                    roomSearchSearchButton.setEnabled(true);
                    JOptionPane.showMessageDialog(null, resourceBundle.getString("Pokoj_hledat_spatny_vstup_kapacita"),
                                                  resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
                }else{
                    capacity = (roomSearchCapacityTextField.getText().trim().isEmpty() ? -1 : Integer.parseInt(roomSearchCapacityTextField.getText()));
                    roomType = getStringRoomType(roomSearchTypeCombo.getSelectedItem().toString());
                    searchRoomSwingWorker = new SearchRoomSwingWorker(capacity, roomType);
                    searchRoomSwingWorker.execute();
                }
                break;
            }
                    
            default: throw new IllegalStateException("Unexpected index retrieved from roomSearchSelectCombo combo boxu while trying to search required rooms");
        }
        
        /*CardLayout card = (CardLayout)roomMainPanel.getLayout();
        card.show(roomMainPanel, "emptyPanel");*/
    }//GEN-LAST:event_roomSearchSearchButtonActionPerformed

    private void reservNewStepOneNextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservNewStepOneNextButtonActionPerformed
        // TODO udelat logiku vyhledavani volnych mistnosti
        
        if(unoccupiedRoomsSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'reservNewStepOneNextButtonActionPerformed' of class 'TestJFrame' - searching all unoccupied rooms in required term in DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservNewStepOneNextButtonActionPerformed' of class 'TestJFrame' - searching all unoccupied rooms in required term in DB operation is already in progress, can't run multiply");
        }
        reservNewStepOneNextButton.setEnabled(false);        
        String strDateFrom = getStringDateFromComboBoxes(reservNewDateFromDayCombo.getSelectedItem().toString(),
                                                         reservNewDateFromMonthCombo.getSelectedItem().toString(),
                                                         reservNewDateFromYearCombo.getSelectedItem().toString());
        String strDateTo = getStringDateFromComboBoxes(reservNewDateToDayCombo.getSelectedItem().toString(),
                                                       reservNewDateToMonthCombo.getSelectedItem().toString(),
                                                       reservNewDateToYearCombo.getSelectedItem().toString());
        try{
            checkDateExists(strDateFrom);
            checkDateExists(strDateTo);
        }catch(IllegalArgumentException ex){
            if(ex.getMessage().contains(strDateFrom)){
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_pridat_spatny_argument_datum_od"),
                                              resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
                reservNewStepOneNextButton.setEnabled(true);
            }else{
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_pridat_spatny_argument_datum_do"),
                                              resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
                reservNewStepOneNextButton.setEnabled(true);
            }
            return;
        }
        
        dateFrom = dateFromString(strDateFrom);
        dateTo = dateFromString(strDateTo);
        
        if(dateTo.getTime() < dateFrom.getTime()){
            dateTo = null;
            dateFrom = null;
            reservNewStepOneNextButton.setEnabled(true);
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_pridat_spatny_argument_datum_do_pred_od"),
                                          resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);            
            return;
        }
        
        if(dateTo.getTime() == dateFrom.getTime()){
            dateTo = null;
            dateFrom = null;
            reservNewStepOneNextButton.setEnabled(true);
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_pridat_spatny_argument_datum_do_stejne_od"),
                                          resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        unoccupiedRoomsSwingWorker = new UnoccupiedRoomsSwingWorker();
        unoccupiedRoomsSwingWorker.execute();
        
    }//GEN-LAST:event_reservNewStepOneNextButtonActionPerformed

    private void guestNewCardIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestNewCardIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_guestNewCardIDTextFieldActionPerformed

    private void guestNewNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestNewNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_guestNewNameTextFieldActionPerformed

    private void guestSearchNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestSearchNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_guestSearchNameTextFieldActionPerformed

    private void guestNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestNewButtonActionPerformed

        if(!guestNewNameTextField.getText().isEmpty()){ guestNewNameTextField.setText(""); }
        if(!guestNewCardIDTextField.getText().isEmpty()){ guestNewCardIDTextField.setText(""); }
        guestNewBornDayCombo.setSelectedIndex(0);
        guestNewBornMonthCombo.setSelectedIndex(0);
        guestNewBornYearCombo.setSelectedIndex(0);
        if(!guestNewPhoneTextField.getText().isEmpty()){ guestNewPhoneTextField.setText(""); }
        
        guestEditButton.setEnabled(false);
        guestDeleteButton.setEnabled(false);
        guestSearchButton.setEnabled(false);
        
        CardLayout card = (CardLayout)guestMainPanel.getLayout();
        card.show(guestMainPanel, "guestNewPanel");
    }//GEN-LAST:event_guestNewButtonActionPerformed

    private void guestEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestEditButtonActionPerformed
        if(setUpKeySwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'guestMenuEditActionPerformed' of class 'TestJFrame' - preparation for updating guest in DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'guestMenuEditActionPerformed' of class 'TestJFrame' - preparation for updating guest in DB operation is already in progress, can't run multiply");
        }
        
        guestDeleteButton.setEnabled(false);
        guestNewButton.setEnabled(false);
        guestEditButton.setEnabled(false);
        guestSearchButton.setEnabled(false);
        guestShowAllButton.setEnabled(false);
        
        if(jTableGuests.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Host_upravit_nevybrany_zaznam"),
                                          resourceBundle.getString("Chybna_operace"), JOptionPane.ERROR_MESSAGE);            
            
            guestDeleteButton.setEnabled(true);
            guestNewButton.setEnabled(true);
            guestEditButton.setEnabled(true);
            guestSearchButton.setEnabled(true);
            guestShowAllButton.setEnabled(true);
            
            CardLayout card = (CardLayout)roomMainPanel.getLayout();
            card.show(roomMainPanel, "emptyPanel");
        }else{
            guestShowAllButton.setEnabled(true);
            m_rowGuest = jTableGuests.getSelectedRow();
            if(guestKey != null){
                guestKey = null;
            }
            
            Guest guest = getGuestFromTable(jTableGuests);
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            String[] parsedSplitedDate = dateFormat.format(guest.getBorn()).split("/");
            
            guestEditNameTextField.setText(guest.getName());
            guestEditCardIDTextField.setText(guest.getIdCardNum());
            guestEditBornDayCombo.setSelectedIndex(Integer.parseInt(parsedSplitedDate[0])-1);
            guestEditBornMonthCombo.setSelectedIndex(Integer.parseInt(parsedSplitedDate[1])-1);
            guestEditBornYearCombo.setSelectedItem(parsedSplitedDate[2]);
            guestEditPhoneTextField.setText(guest.getPhone());
            
            setUpKeySwingWorker = new SetUpKeySwingWorker(guest);
            setUpKeySwingWorker.execute();
            
            CardLayout card = (CardLayout)guestMainPanel.getLayout();
            card.show(guestMainPanel, "guestEditPanel");
        }
        
        
    }//GEN-LAST:event_guestEditButtonActionPerformed

    private void guestNewCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestNewCancelButtonActionPerformed
        // TODO discarding changes
        guestEditButton.setEnabled(true);
        guestDeleteButton.setEnabled(true);
        guestSearchButton.setEnabled(true);
        
        CardLayout card = (CardLayout)guestMainPanel.getLayout();
        card.show(guestMainPanel, "guestEmptyPanel");
    }//GEN-LAST:event_guestNewCancelButtonActionPerformed

    private void guestNewSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestNewSaveButtonActionPerformed
        // TODO saving changes
        
        if(addNewGuestSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'guestNewSaveButActionPerformed' of class 'TestJFrame' - saving guest to DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'guestNewSaveButActionPerformed' of class 'TestJFrame' - saving guest to DB operation is already in progress, can't run multiply");
        }
        guestNewSaveButton.setEnabled(false);
        String[] inVals = {guestNewNameTextField.getText(), guestNewCardIDTextField.getText(),
                           guestNewBornDayCombo.getSelectedItem().toString(), guestNewBornMonthCombo.getSelectedItem().toString(),
                           guestNewBornYearCombo.getSelectedItem().toString(), guestNewPhoneTextField.getText()};
        String msgs = checkAllGuestValuesWereFilledOut(inVals);
        if(msgs == null){
            addNewGuestSwingWorker = new AddNewGuestSwingWorker(inVals);
            addNewGuestSwingWorker.execute();
        }else{
            guestNewSaveButton.setEnabled(true);
            JOptionPane.showMessageDialog(null, msgs, resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_guestNewSaveButtonActionPerformed

    private void guestSearchSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestSearchSearchButtonActionPerformed
        if(searchGuestSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'guestSearchButActionPerformed' of class 'TestJFrame' - searching suitable guests in DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'guestSearchButActionPerformed' of class 'TestJFrame' - searching suitable guests in DB operation is already in progress, can't run multiply");
        }
        guestSearchSearchButton.setEnabled(false);
        String guestName = guestSearchNameTextField.getText();
        if(guestName != null && !guestName.trim().isEmpty()){
            searchGuestSwingWorker = new SearchGuestSwingWorker(guestName);
            searchGuestSwingWorker.execute();
        }else{
            guestSearchSearchButton.setEnabled(true);
            logger.log(Level.SEVERE, "Guest search by name failure: Filled name is null or empty");
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Host_hledat_spatny_vstup_jmeno"),
                                          resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
        }
        
        /*CardLayout card = (CardLayout)guestMainPanel.getLayout();
        card.show(guestMainPanel, "guestEmptyPanel");*/
    }//GEN-LAST:event_guestSearchSearchButtonActionPerformed

    private void reservSearchSearchByComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservSearchSearchByComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reservSearchSearchByComboActionPerformed

    private void reservNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservNewButtonActionPerformed
        if(showAllRoomsSW != null){
            logger.log(Level.SEVERE, "Error in method 'reservNewButtonActionPerformed' of class 'TestJFrame' - retrieving all rooms from DB operation for showing them in jTable is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservNewButtonActionPerformed' of class 'TestJFrame' - retrieving all rooms from DB operation for showing them in jTable is already in progress, can't run multiply");
        }
        
        showAllRoomsSW = new RoomsToJTableSwingWorker(jTableRooms1.getModel());
        RoomsTableModel roomsTableModel = (RoomsTableModel)jTableRooms1.getModel();
        
        roomsTableModel.removeAllRoomsOnlyVisually();        
        showAllRoomsSW.execute();
        
        reservNewDateFromDayCombo.setSelectedIndex(0);
        reservNewDateToDayCombo.setSelectedIndex(0);
        reservNewDateFromMonthCombo.setSelectedIndex(0);
        reservNewDateToMonthCombo.setSelectedIndex(0);
        reservNewDateFromYearCombo.setSelectedIndex(0);
        reservNewDateToYearCombo.setSelectedIndex(0);
        
        reservDeleteButton.setEnabled(false);
        reservEditButton.setEnabled(false);
        reservSearchButton.setEnabled(false);
        
        jTableGuests1.setRowSelectionAllowed(false);
        jTableRooms1.setRowSelectionAllowed(false);        
        
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "roomAvailabilityPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "addReservationTables");
    }//GEN-LAST:event_reservNewButtonActionPerformed

    private void reservEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservEditButtonActionPerformed
        if(tableRoomRowSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'reservEditButtonActionPerformed' of class 'TestJFrame' - retrieving room from DB in order to get row in jTable operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservEditButtonActionPerformed' of class 'TestJFrame' - retrieving room from DB in order to get row in jTable operation is already in progress, can't run multiply");
        }

        if(tableGuestRowSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'reservEditButtonActionPerformed' of class 'TestJFrame' - retrieving guest from DB in order to get row in jTable operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservEditButtonActionPerformed' of class 'TestJFrame' - retrieving guest from DB in order to get row in jTable operation is already in progress, can't run multiply");
        }
        
        if(setUpKeySwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'reservEditButtonActionPerformed' of class 'TestJFrame' - preparation for updating reservation in DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservEditButtonActionPerformed' of class 'TestJFrame' - preparation for updating reservation in DB operation is already in progress, can't run multiply");
        }
        
        if(showAllRoomsSW != null){
            logger.log(Level.SEVERE, "Error in method 'reservNewStepTwoBackButtonActionPerformed' of class 'TestJFrame' - retrieving all rooms from DB operation for showing them in jTable is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservNewStepTwoBackButtonActionPerformed' of class 'TestJFrame' - retrieving all rooms from DB operation for showing them in jTable is already in progress, can't run multiply");
        }
        
        
        
        if(jTableReservations.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_upravit_nevybrany_zaznam"),
                                          resourceBundle.getString("Chybna_operace"), JOptionPane.ERROR_MESSAGE);            
            return;
        }

        reservNewButton.setEnabled(false);
        reservDeleteButton.setEnabled(false);
        reservSearchButton.setEnabled(false);

        int row = jTableReservations.getSelectedRow();
        String roomNumber = jTableReservations.getValueAt(row, 1).toString();
        String guestName = jTableReservations.getValueAt(row, 2).toString();
        String guestCardID = jTableReservations.getValueAt(row, 3).toString();
        Date startTime = getDateFromTableStringDate(jTableReservations.getValueAt(row, 4).toString());
        Date expEndTime = getDateFromTableStringDate(jTableReservations.getValueAt(row, 5).toString());
        Date realEndTime = jTableReservations.getValueAt(row, 6) == null ? null : getDateFromTableStringDate(jTableReservations.getValueAt(row, 6).toString());
        BigDecimal servSpends = new BigDecimal(getNonFormattedPrice(jTableReservations.getValueAt(row, 8).toString()));
        Reservation reservation = new Reservation();
        Room room = new Room();
        Guest guest = new Guest();
        
        room.setNumber(roomNumber);
        guest.setName(guestName);
        guest.setIdCardNum(guestCardID);
        reservation.setGuest(guest);
        reservation.setRoom(room);
        reservation.setStartTime(startTime);
        reservation.setExpectedEndTime(expEndTime);
        reservation.setRealEndTime(realEndTime);
        reservation.setServicesSpendings(servSpends);
        
        showAllRoomsSW = new RoomsToJTableSwingWorker(jTableRooms1.getModel());
        RoomsTableModel roomsTableModel = (RoomsTableModel)jTableRooms1.getModel();
        
        roomsTableModel.removeAllRoomsOnlyVisually();        
        showAllRoomsSW.execute();
        
        setUpKeySwingWorker = new SetUpKeySwingWorker(reservation);
        tableRoomRowSwingWorker = new TableRoomRowSwingWorker(roomNumber);
        tableGuestRowSwingWorker = new TableGuestRowSwingWorker(guestName, guestCardID);
        tableRoomRowSwingWorker.execute();
        tableGuestRowSwingWorker.execute();
        setUpKeySwingWorker.execute();

        String[] strStartTime = getSplittedDateForComboBoxes(jTableReservations.getValueAt(row, 4).toString());
        String[] strExpEndTime = getSplittedDateForComboBoxes(jTableReservations.getValueAt(row, 5).toString());
        String ret = jTableReservations.getValueAt(row, 6) == null ? "" : jTableReservations.getValueAt(row, 6).toString();
        if(ret.trim().isEmpty()){
            Locale locale = Locale.getDefault();
            DateFormat df = DateFormat.getDateInstance(DateFormat.MEDIUM, locale);
            ret = df.format(new TimeManagerImpl().getCurrentDate());
        }
        String[] strRealEndTime = getSplittedDateForComboBoxes(ret);
        String strServSpends = getNonFormattedPrice(jTableReservations.getValueAt(row, 8).toString());

        reservEditStartTimeDayCombo.setSelectedIndex(Integer.parseInt(strStartTime[0])-1);
        reservEditStartTimeMonthCombo.setSelectedIndex(Integer.parseInt(strStartTime[1])-1);
        reservEditStartTimeYearCombo.setSelectedItem(strStartTime[2]);

        reservEditExpEndDayCombo.setSelectedIndex(Integer.parseInt(strExpEndTime[0])-1);
        reservEditExpEndMonthCombo.setSelectedIndex(Integer.parseInt(strExpEndTime[1])-1);
        reservEditExpEndYearCombo.setSelectedItem(strExpEndTime[2]);

        reservEditRealEndDayCombo.setSelectedIndex(Integer.parseInt(strRealEndTime[0])-1);
        reservEditRealEndMonthCombo.setSelectedIndex(Integer.parseInt(strRealEndTime[1])-1);
        reservEditRealEndYearCombo.setSelectedItem(strRealEndTime[2]);

        reservEditServsSpendsTextField.setText(strServSpends);
        
        reservEditRealEndUsageCheckBox.setSelected(false);

        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationEditPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "addReservationTables");
        
    }//GEN-LAST:event_reservEditButtonActionPerformed

    private void reservSearchSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservSearchSearchButtonActionPerformed
        // TODO search logic
        
        if(searchReservationSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'reservSearchSearchButtonActionPerformed' of class 'TestJFrame' - searching suitable reservations in DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservSearchSearchButtonActionPerformed' of class 'TestJFrame' - searching suitable reservations in DB operation is already in progress, can't run multiply");
        }
        reservSearchSearchButton.setEnabled(false);
        Room room = null;
        Guest guest = null;
        switch(reservSearchSearchByCombo.getSelectedIndex()){
            case 0:{
                if(jTableRooms1.getSelectedRow() == -1){
                    reservSearchSearchButton.setEnabled(true);
                    JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_hledat_nevybrany_zaznam_pokoj"),
                                                  resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
                    return;
                }else{
                    room = getRoomFromTable(jTableRooms1);
                    searchReservationSwingWorker = new SearchReservationSwingWorker(guest,room);
                    searchReservationSwingWorker.execute();
                }
                break;
            }
            
            case 1:{
                if(jTableGuests1.getSelectedRow() == -1){
                    reservSearchSearchButton.setEnabled(true);
                    JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_hledat_nevybrany_zaznam_host"),
                                                  resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
                    return;
                }else{
                    guest = getGuestFromTable(jTableGuests1);
                    searchReservationSwingWorker = new SearchReservationSwingWorker(guest,room);
                    searchReservationSwingWorker.execute();
                }
                break;
            }
                
            case 2:{
                if(jTableRooms1.getSelectedRow() == -1){
                    reservSearchSearchButton.setEnabled(true);
                    JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_hledat_nevybrany_zaznam_pokoj"),
                                                  resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if(jTableGuests1.getSelectedRow() == -1){
                    reservSearchSearchButton.setEnabled(true);
                    JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_hledat_nevybrany_zaznam_host"),
                                                  resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                room = getRoomFromTable(jTableRooms1);
                guest = getGuestFromTable(jTableGuests1);
                searchReservationSwingWorker = new SearchReservationSwingWorker(guest,room);
                searchReservationSwingWorker.execute();
                break;
            }
                    
            default: throw new IllegalStateException("Unexpected index retrieved from reservSearchSearchByCombo combo boxu while trying to search required rooms");
        }
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationEmptyPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "reservationMainTable");
    }//GEN-LAST:event_reservSearchSearchButtonActionPerformed

    private void reservNewStepTwoCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservNewStepTwoCancelButtonActionPerformed
        // TODO discarding edits - not saving
        reservEditButton.setEnabled(true);
        reservDeleteButton.setEnabled(true);
        reservSearchButton.setEnabled(true);
        reservNewStepOneNextButton.setEnabled(true);
        jTableGuests1.setRowSelectionAllowed(true);
        jTableRooms1.setRowSelectionAllowed(true);
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationEmptyPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "reservationMainTable");
    }//GEN-LAST:event_reservNewStepTwoCancelButtonActionPerformed

    private void reservNewStepTwoSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservNewStepTwoSaveButtonActionPerformed
        // TODO saving
        if(addNewReservationSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'reservNewStepTwoSaveButtonActionPerformed' of class 'TestJFrame' - storing new reservation into DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservNewStepTwoSaveButtonActionPerformed' of class 'TestJFrame' - storing new reservation into DB operation is already in progress, can't run multiply");
        }
        reservNewStepTwoSaveButton.setEnabled(false);
        m_rowRoom = jTableRooms1.getSelectedRow();
        m_rowGuest = jTableGuests1.getSelectedRow();
        
        if(m_rowRoom == -1){
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_pridat_upravit_nevybrany_zaznam_pokoj"),
                                          resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
            m_rowGuest = -1;
            reservNewStepTwoSaveButton.setEnabled(true);
            return;
        }
        
        if(m_rowGuest == -1){
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_pridat_upravit_nevybrany_zaznam_host"),
                                          resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
            m_rowRoom = -1;
            reservNewStepTwoSaveButton.setEnabled(true);
            return;
        }
        
        jTableRooms1.setRowSelectionAllowed(false);
        jTableGuests1.setRowSelectionAllowed(false);
        addNewReservationSwingWorker = new AddNewReservationSwingWorker();
        addNewReservationSwingWorker.execute();
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationEmptyPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "reservationMainTable");
    }//GEN-LAST:event_reservNewStepTwoSaveButtonActionPerformed

    private void reservPastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservPastButtonActionPerformed
        // TODO shows past reservations
        if(showPastReservationsSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'reservPastButtonActionPerformed' of class 'TestJFrame' - retrieving all past reservations from DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservPastButtonActionPerformed' of class 'TestJFrame' - retrieving all past reservations from DB operation is already in progress, can't run multiply");
        }
        
        reservPastButton.setEnabled(false);
        reservPastButtonInActual.setEnabled(false);
        
        showPastReservationsSwingWorker = new ShowPastReservationsSwingWorker();
        showPastReservationsSwingWorker.execute();
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationEmptyPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "reservationMainTable");
    }//GEN-LAST:event_reservPastButtonActionPerformed

    private void reservActualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservActualButtonActionPerformed
        // TODO shows actual reservations
        if(showActualReservationsSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'reservActualButtonActionPerformed' of class 'TestJFrame' - retrieving all actual reservations from DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservActualButtonActionPerformed' of class 'TestJFrame' - retrieving all actual reservations from DB operation is already in progress, can't run multiply");
        }
        
        if(showTopFiveSpendersSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'reservActualButtonActionPerformed' of class 'TestJFrame' - retrieving top 5 spenders from DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservActualButtonActionPerformed' of class 'TestJFrame' - retrieving top 5 spenders from DB operation is already in progress, can't run multiply");
        }
        
        reservActualButton.setEnabled(false);
        
        showActualReservationsSwingWorker = new ShowActualReservationsSwingWorker();   
        showActualReservationsSwingWorker.execute();
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationTopFiveSpendersPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "reservationMainTable");
    }//GEN-LAST:event_reservActualButtonActionPerformed

    private void reservFutureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservFutureButtonActionPerformed
        // TODO shows future reservations
        if(showFutureReservationsSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'reservFutureButtonActionPerformed' of class 'TestJFrame' - retrieving all future reservations from DB operation for showing them in jTable is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservFutureButtonActionPerformed' of class 'TestJFrame' - retrieving all future reservations from DB operation for showing them in jTable is already in progress, can't run multiply");
        }
        
        reservFutureButton.setEnabled(false);
        reservFutureButtonInActual.setEnabled(false);
        
        showFutureReservationsSwingWorker = new ShowFutureReservationsSwingWorker();
        showFutureReservationsSwingWorker.execute();
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationEmptyPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "reservationMainTable");
    }//GEN-LAST:event_reservFutureButtonActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void roomEditNumberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomEditNumberTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomEditNumberTextFieldActionPerformed

    private void roomEditCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomEditCancelButtonActionPerformed
        roomNewButton.setEnabled(true);
        roomDeleteButton.setEnabled(true);
        roomSearchButton.setEnabled(true);
        
        CardLayout card = (CardLayout)roomMainPanel.getLayout();
        card.show(roomMainPanel, "emptyPanel");
    }//GEN-LAST:event_roomEditCancelButtonActionPerformed

    private void roomEditSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomEditSaveButtonActionPerformed
        
        if(updateRoomSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'roomEditSaveButActionPerformed' of class 'TestJFrame' - updating room in DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'roomEditSaveButActionPerformed' of class 'TestJFrame' - updating room in DB operation is already in progress, can't run multiply");
        }
        roomEditSaveButton.setEnabled(false);
        jTableRooms.setRowSelectionAllowed(false);
        String[] inVals = {roomEditNumberTextField.getText(), roomEditCapacityTextField.getText(),
                           roomEditFloorTextField.getText(), getStringRoomType(roomEditTypeCombo.getSelectedItem().toString()),
                           roomEditPriceTextField.getText()};
        String msgs = checkAllRoomValuesWereFilledOut(inVals);
        if(msgs == null){
            updateRoomSwingWorker = new UpdateRoomSwingWorker(inVals);
            updateRoomSwingWorker.execute();
        }else{
            roomEditSaveButton.setEnabled(true);
            jTableRooms.setRowSelectionAllowed(true);
            JOptionPane.showMessageDialog(null, msgs, resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
        }
        
        
       /* CardLayout card = (CardLayout)roomMainPanel.getLayout();
        card.show(roomMainPanel, "emptyPanel");*/
    }//GEN-LAST:event_roomEditSaveButtonActionPerformed

    private void roomEditCapacityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomEditCapacityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomEditCapacityTextFieldActionPerformed

    private void guestEditCardIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestEditCardIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_guestEditCardIDTextFieldActionPerformed

    private void guestEditNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestEditNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_guestEditNameTextFieldActionPerformed

    private void guestEditSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestEditSaveButtonActionPerformed
        
        if(updateGuestSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'guestEditSaveButActionPerformed' of class 'TestJFrame' - updating guest in DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'guestEditSaveButActionPerformed' of class 'TestJFrame' - updating guest in DB operation is already in progress, can't run multiply");
        }
        guestEditSaveButton.setEnabled(false);
        jTableGuests.setRowSelectionAllowed(false);
        String[] inVals = {guestEditNameTextField.getText(),
                           guestEditCardIDTextField.getText(),
                           guestEditBornDayCombo.getSelectedItem().toString(),
                           guestEditBornMonthCombo.getSelectedItem().toString(),
                           guestEditBornYearCombo.getSelectedItem().toString(),
                           guestEditPhoneTextField.getText()};
        String msgs = checkAllGuestValuesWereFilledOut(inVals);
        if(msgs == null){
            updateGuestSwingWorker = new UpdateGuestSwingWorker(inVals);
            updateGuestSwingWorker.execute();
        }else{
            guestEditSaveButton.setEnabled(true);
            jTableGuests.setRowSelectionAllowed(true);
            JOptionPane.showMessageDialog(null, msgs, resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_guestEditSaveButtonActionPerformed

    private void guestEditCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestEditCancelButtonActionPerformed
        
        guestEditNameTextField.setText("");
        guestEditCardIDTextField.setText("");
        guestEditBornDayCombo.setSelectedIndex(0);
        guestEditBornMonthCombo.setSelectedIndex(0);
        guestEditBornYearCombo.setSelectedIndex(0);
        guestEditPhoneTextField.setText("");
        
        guestNewButton.setEnabled(true);
        guestDeleteButton.setEnabled(true);
        guestSearchButton.setEnabled(true);
        
        CardLayout card = (CardLayout)guestMainPanel.getLayout();
        card.show(guestMainPanel, "guestEmptyPanel");
    }//GEN-LAST:event_guestEditCancelButtonActionPerformed

    private void reservEditCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservEditCancelButtonActionPerformed
        // TODO add your handling code here:
        reservNewButton.setEnabled(true);
        reservDeleteButton.setEnabled(true);
        reservSearchButton.setEnabled(true);
        reservEditSaveButton.setEnabled(true);
        jTableReservations.setRowSelectionAllowed(true);
        jTableGuests1.setRowSelectionAllowed(true);
        jTableRooms1.setRowSelectionAllowed(true);
        
        if(showAllReservationsSW != null){
            logger.log(Level.SEVERE, "Error in method 'reservEditCancelButtonActionPerformed' of class 'TestJFrame' - retrieving all reservations from DB in roder to show them in jTable operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservEditCancelButtonActionPerformed' of class 'TestJFrame' - retrieving all reservations from DB in roder to show them in jTable operation is already in progress, can't run multiply");
        }
        ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
        reservationsTableModel.removeAllReservationsOnlyVisually();
        showAllReservationsSW = new ReservationsToJTableSwingWorker(jTableReservations.getModel());
        showAllReservationsSW.execute();
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationEmptyPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "reservationMainTable");
    }//GEN-LAST:event_reservEditCancelButtonActionPerformed

    private void reservEditSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservEditSaveButtonActionPerformed
        // TODO add your handling code here:
        if(updateReservationSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'guestEditSaveButActionPerformed' of class 'TestJFrame' - updating guest in DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'guestEditSaveButActionPerformed' of class 'TestJFrame' - updating guest in DB operation is already in progress, can't run multiply");
        }
        reservEditSaveButton.setEnabled(false);
        jTableReservations.setRowSelectionAllowed(false);
        jTableGuests1.setRowSelectionAllowed(false);
        jTableRooms1.setRowSelectionAllowed(false);
        if(jTableRooms1.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_pridat_upravit_nevybrany_zaznam_pokoj"),
                                          resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
            
            reservEditSaveButton.setEnabled(true);
            jTableReservations.setRowSelectionAllowed(true);
            jTableGuests1.setRowSelectionAllowed(true);
            jTableRooms1.setRowSelectionAllowed(true);
            return;
        }
        
        if(jTableGuests1.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_pridat_upravit_nevybrany_zaznam_host"),
                                          resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
            reservEditSaveButton.setEnabled(true);
            jTableReservations.setRowSelectionAllowed(true);
            jTableGuests1.setRowSelectionAllowed(true);
            jTableRooms1.setRowSelectionAllowed(true);
            return;
        }
        
        Guest guest = getGuestFromTable(jTableGuests1);
        Room room = getRoomFromTable(jTableRooms1);
        
        String startTime = getStringDateFromComboBoxes(reservEditStartTimeDayCombo.getSelectedItem().toString(),
                                                       reservEditStartTimeMonthCombo.getSelectedItem().toString(),
                                                       reservEditStartTimeYearCombo.getSelectedItem().toString());
        String expEndTime = getStringDateFromComboBoxes(reservEditExpEndDayCombo.getSelectedItem().toString(),
                                                        reservEditExpEndMonthCombo.getSelectedItem().toString(),
                                                        reservEditExpEndYearCombo.getSelectedItem().toString());
        String realEndTime = null;
        if(reservEditRealEndUsageCheckBox.isSelected()){
            realEndTime = getStringDateFromComboBoxes(reservEditRealEndDayCombo.getSelectedItem().toString(),
                                                      reservEditRealEndMonthCombo.getSelectedItem().toString(),
                                                      reservEditRealEndYearCombo.getSelectedItem().toString());
        }
        try{
            checkDateExists(startTime);
        }catch(IllegalArgumentException ex){
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_upravit_spatny_argument_datum_pocatek"),
                                          resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
            reservEditSaveButton.setEnabled(true);
            jTableReservations.setRowSelectionAllowed(true);
            jTableGuests1.setRowSelectionAllowed(true);
            jTableRooms1.setRowSelectionAllowed(true);
            return;
        }
        
        try{
            checkDateExists(startTime);
        }catch(IllegalArgumentException ex){
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_upravit_spatny_argument_datum_predp_konec"),
                                          resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
            reservEditSaveButton.setEnabled(true);
            jTableReservations.setRowSelectionAllowed(true);
            jTableGuests1.setRowSelectionAllowed(true);
            jTableRooms1.setRowSelectionAllowed(true);
            return;
        }
        
        try{
            checkDateExists(startTime);
        }catch(IllegalArgumentException ex){
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_upravit_spatny_argument_datum_konec"),
                                          resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
            reservEditSaveButton.setEnabled(true);
            jTableReservations.setRowSelectionAllowed(true);
            jTableGuests1.setRowSelectionAllowed(true);
            jTableRooms1.setRowSelectionAllowed(true);
            return;
        }
        
        String servSpends = reservEditServsSpendsTextField.getText();
        
        if(servSpends.trim().isEmpty()){
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_upravit_spatny_argument_utrata_za_sluzby"),
                                          resourceBundle.getString("Neplatny_argument"), JOptionPane.ERROR_MESSAGE);
            reservEditSaveButton.setEnabled(true);
            jTableReservations.setRowSelectionAllowed(true);
            jTableGuests1.setRowSelectionAllowed(true);
            jTableRooms1.setRowSelectionAllowed(true);
            return;
        }
        
        if(realEndTime == null){
            String[] inVals = {startTime, expEndTime, servSpends};
            updateReservationSwingWorker = new UpdateReservationSwingWorker(guest, room, inVals);
            updateReservationSwingWorker.execute();
        }else{
            String[] inVals = {startTime, expEndTime, realEndTime, servSpends};
            updateReservationSwingWorker = new UpdateReservationSwingWorker(guest, room, inVals);
            updateReservationSwingWorker.execute();
        }
        
    }//GEN-LAST:event_reservEditSaveButtonActionPerformed

    private void reservNewDateFromDayComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservNewDateFromDayComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reservNewDateFromDayComboActionPerformed

    private void reservNewDateFromYearComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservNewDateFromYearComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reservNewDateFromYearComboActionPerformed

    private void reservNewStepTwoBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservNewStepTwoBackButtonActionPerformed
        // TODO add your handling code here:
        if(showAllRoomsSW != null){
            logger.log(Level.SEVERE, "Error in method 'reservNewStepTwoBackButtonActionPerformed' of class 'TestJFrame' - retrieving all rooms from DB operation for showing them in jTable is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservNewStepTwoBackButtonActionPerformed' of class 'TestJFrame' - retrieving all rooms from DB operation for showing them in jTable is already in progress, can't run multiply");
        }
        
        showAllRoomsSW = new RoomsToJTableSwingWorker(jTableRooms1.getModel());
        RoomsTableModel roomsTableModel = (RoomsTableModel)jTableRooms1.getModel();
        
        roomsTableModel.removeAllRoomsOnlyVisually();        
        showAllRoomsSW.execute();
        
        reservNewStepOneNextButton.setEnabled(true);
        jTableGuests1.setRowSelectionAllowed(false);
        jTableRooms1.setRowSelectionAllowed(false);
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "roomAvailabilityPanel");
    }//GEN-LAST:event_reservNewStepTwoBackButtonActionPerformed

    private void reservNewStepOneCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservNewStepOneCancelButtonActionPerformed
        // TODO add your handling code here:
        reservEditButton.setEnabled(true);
        reservDeleteButton.setEnabled(true);
        reservSearchButton.setEnabled(true);
        jTableGuests1.setRowSelectionAllowed(true);
        jTableRooms1.setRowSelectionAllowed(true);
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationEmptyPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "reservationMainTable");
    }//GEN-LAST:event_reservNewStepOneCancelButtonActionPerformed

    private void reservFutureButtonInActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservFutureButtonInActualActionPerformed
        if(showFutureReservationsSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'reservFutureButtonInActualActionPerformed' of class 'TestJFrame' - retrieving all future reservations from DB operation for showing them in jTable is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservFutureButtonInActualActionPerformed' of class 'TestJFrame' - retrieving all future reservations from DB operation for showing them in jTable is already in progress, can't run multiply");
        }
        
        reservFutureButton.setEnabled(false);
        reservFutureButtonInActual.setEnabled(false);
        
        showFutureReservationsSwingWorker = new ShowFutureReservationsSwingWorker();
        showFutureReservationsSwingWorker.execute();
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationEmptyPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "reservationMainTable");
    }//GEN-LAST:event_reservFutureButtonInActualActionPerformed

    private void reservPastButtonInActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservPastButtonInActualActionPerformed
        if(showPastReservationsSwingWorker != null){
            logger.log(Level.SEVERE, "Error in method 'reservPastButtonInActualActionPerformed' of class 'TestJFrame' - retrieving all past reservations from DB operation is already in progress, can't run multiply");
            throw new IllegalStateException("Error in method 'reservPastButtonInActualActionPerformed' of class 'TestJFrame' - retrieving all past reservations from DB operation is already in progress, can't run multiply");
        }
        
        reservPastButton.setEnabled(false);
        reservPastButtonInActual.setEnabled(false);
        
        showPastReservationsSwingWorker = new ShowPastReservationsSwingWorker();
        showPastReservationsSwingWorker.execute();
        
        CardLayout card = (CardLayout)reservationMainPanel.getLayout();
        card.show(reservationMainPanel, "reservationEmptyPanel");
        CardLayout tableCard = (CardLayout)reservationTables.getLayout();
        tableCard.show(reservationTables, "reservationMainTable");
    }//GEN-LAST:event_reservPastButtonInActualActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TestJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Evidence;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JPanel GuestEvidence;
    private javax.swing.JMenu Menu;
    private javax.swing.JPanel ReservationEvidence;
    private javax.swing.JPanel RoomEvidence;
    private javax.swing.JPanel RoomMenu;
    private javax.swing.JPanel addReservationTables;
    private javax.swing.JPanel emptyPanel;
    private javax.swing.JButton guestDeleteButton;
    private javax.swing.JComboBox guestEditBornDayCombo;
    private javax.swing.JComboBox guestEditBornMonthCombo;
    private javax.swing.JComboBox guestEditBornYearCombo;
    private javax.swing.JButton guestEditButton;
    private javax.swing.JButton guestEditCancelButton;
    private java.awt.Label guestEditCardIDLabel;
    private javax.swing.JTextField guestEditCardIDTextField;
    private java.awt.Label guestEditDateLabel;
    private java.awt.Label guestEditNameLabel;
    private javax.swing.JTextField guestEditNameTextField;
    private javax.swing.JPanel guestEditPanel;
    private java.awt.Label guestEditPhoneLabel;
    private javax.swing.JTextField guestEditPhoneTextField;
    private javax.swing.JButton guestEditSaveButton;
    private javax.swing.JPanel guestEmptyPanel;
    private javax.swing.JPanel guestMainPanel;
    private javax.swing.JPanel guestMenuPanel;
    private javax.swing.JComboBox guestNewBornDayCombo;
    private javax.swing.JComboBox guestNewBornMonthCombo;
    private javax.swing.JComboBox guestNewBornYearCombo;
    private javax.swing.JButton guestNewButton;
    private javax.swing.JButton guestNewCancelButton;
    private java.awt.Label guestNewCardIDLabel;
    private javax.swing.JTextField guestNewCardIDTextField;
    private java.awt.Label guestNewDateLabel;
    private java.awt.Label guestNewNameLabel;
    private javax.swing.JTextField guestNewNameTextField;
    private javax.swing.JPanel guestNewPanel;
    private java.awt.Label guestNewPhoneLabel;
    private javax.swing.JTextField guestNewPhoneTextField;
    private javax.swing.JButton guestNewSaveButton;
    private javax.swing.JButton guestSearchButton;
    private java.awt.Label guestSearchNameLabel;
    private javax.swing.JTextField guestSearchNameTextField;
    private javax.swing.JPanel guestSearchPanel;
    private javax.swing.JButton guestSearchSearchButton;
    private javax.swing.JButton guestShowAllButton;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTableGuests;
    private javax.swing.JTable jTableGuests1;
    private javax.swing.JTable jTableReservations;
    private javax.swing.JTable jTableRooms;
    private javax.swing.JTable jTableRooms1;
    private javax.swing.JTable jTableTopFiveSpenders;
    private java.awt.Label label1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton reservActualButton;
    private javax.swing.JButton reservDeleteButton;
    private javax.swing.JButton reservEditButton;
    private javax.swing.JButton reservEditCancelButton;
    private javax.swing.JComboBox reservEditExpEndDayCombo;
    private javax.swing.JComboBox reservEditExpEndMonthCombo;
    private java.awt.Label reservEditExpEndTimeLabel;
    private javax.swing.JComboBox reservEditExpEndYearCombo;
    private javax.swing.JComboBox reservEditRealEndDayCombo;
    private javax.swing.JComboBox reservEditRealEndMonthCombo;
    private java.awt.Label reservEditRealEndTimeLabel;
    private javax.swing.JCheckBox reservEditRealEndUsageCheckBox;
    private javax.swing.JComboBox reservEditRealEndYearCombo;
    private javax.swing.JButton reservEditSaveButton;
    private java.awt.Label reservEditServsSpendsLabel;
    private javax.swing.JTextField reservEditServsSpendsTextField;
    private javax.swing.JComboBox reservEditStartTimeDayCombo;
    private java.awt.Label reservEditStartTimeLabel;
    private javax.swing.JComboBox reservEditStartTimeMonthCombo;
    private javax.swing.JComboBox reservEditStartTimeYearCombo;
    private javax.swing.JButton reservFutureButton;
    private javax.swing.JButton reservFutureButtonInActual;
    private javax.swing.JButton reservNewButton;
    private javax.swing.JComboBox reservNewDateFromDayCombo;
    private java.awt.Label reservNewDateFromLabel;
    private javax.swing.JComboBox reservNewDateFromMonthCombo;
    private javax.swing.JComboBox reservNewDateFromYearCombo;
    private javax.swing.JComboBox reservNewDateToDayCombo;
    private java.awt.Label reservNewDateToLabel;
    private javax.swing.JComboBox reservNewDateToMonthCombo;
    private javax.swing.JComboBox reservNewDateToYearCombo;
    private javax.swing.JButton reservNewStepOneCancelButton;
    private javax.swing.JButton reservNewStepOneNextButton;
    private javax.swing.JButton reservNewStepTwoBackButton;
    private javax.swing.JButton reservNewStepTwoCancelButton;
    private javax.swing.JButton reservNewStepTwoSaveButton;
    private javax.swing.JButton reservPastButton;
    private javax.swing.JButton reservPastButtonInActual;
    private javax.swing.JButton reservSearchButton;
    private javax.swing.JButton reservSearchSearchButton;
    private javax.swing.JComboBox reservSearchSearchByCombo;
    private java.awt.Label reservSearchSearchByLabel;
    private javax.swing.JButton reservShowAllButton;
    private javax.swing.JLabel reservTopFiveSpendersLabel;
    private javax.swing.JPanel reservationEditPanel;
    private javax.swing.JPanel reservationEmptyPanel;
    private javax.swing.JPanel reservationMainPanel;
    private javax.swing.JScrollPane reservationMainTable;
    private javax.swing.JPanel reservationMenu;
    private javax.swing.JPanel reservationNewStepOnePanel;
    private javax.swing.JPanel reservationNewStepTwoPanel;
    private javax.swing.JPanel reservationSearchPanel;
    private javax.swing.JPanel reservationTables;
    private javax.swing.JPanel reservationTopFiveSpendersPanel;
    private javax.swing.JButton roomDeleteButton;
    private javax.swing.JButton roomEditButton;
    private javax.swing.JButton roomEditCancelButton;
    private java.awt.Label roomEditCapacityLabel;
    private javax.swing.JTextField roomEditCapacityTextField;
    private java.awt.Label roomEditFloorLabel;
    private javax.swing.JTextField roomEditFloorTextField;
    private java.awt.Label roomEditNumberLabel;
    private javax.swing.JTextField roomEditNumberTextField;
    private javax.swing.JPanel roomEditPanel;
    private java.awt.Label roomEditPriceLabel;
    private javax.swing.JTextField roomEditPriceTextField;
    private javax.swing.JButton roomEditSaveButton;
    private javax.swing.JComboBox roomEditTypeCombo;
    private java.awt.Label roomEditTypeLabel;
    private javax.swing.JPanel roomMainPanel;
    private javax.swing.JButton roomNewButton;
    private javax.swing.JButton roomNewCancelButton;
    private java.awt.Label roomNewCapacityLabel;
    private javax.swing.JTextField roomNewCapacityTextField;
    private java.awt.Label roomNewFloorLabel;
    private javax.swing.JTextField roomNewFloorTextField;
    private java.awt.Label roomNewNumberLabel;
    private javax.swing.JTextField roomNewNumberTextField;
    private javax.swing.JPanel roomNewPanel;
    private java.awt.Label roomNewPriceLabel;
    private javax.swing.JTextField roomNewPriceTextField;
    private javax.swing.JButton roomNewSaveButton;
    private javax.swing.JComboBox roomNewTypeCombo;
    private java.awt.Label roomNewTypeLabel;
    private javax.swing.JButton roomSearchButton;
    private java.awt.Label roomSearchCapacityLabel;
    private javax.swing.JTextField roomSearchCapacityTextField;
    private javax.swing.JPanel roomSearchPanel;
    private javax.swing.JButton roomSearchSearchButton;
    private javax.swing.JComboBox roomSearchSearchByCombo;
    private java.awt.Label roomSearchSearchByLabel;
    private javax.swing.JComboBox roomSearchTypeCombo;
    private java.awt.Label roomSearchTypeLabel;
    private javax.swing.JButton roomShowAllButton;
    // End of variables declaration//GEN-END:variables

    private DataSource setUpDataSource(){
        HGEConfig config = new HGEConfig();
        DataSource ds = null;
        try{
            ds = config.dataSource();
            config.setupDataSource(ds);
        }catch(IOException ex){
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Naplneni_tabulek_daty_DB_config_chybi_poskozen"),
                                          resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Naplneni_tabulek_daty_nevytvoreni_tab_v_DB"),
                                          resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
        }
        
        return ds;
    }
    
    private void fulfillAllTables(){
        GuestsToJTableSwingWorker guestsToJTableSW = new GuestsToJTableSwingWorker(jTableGuests.getModel());        
        GuestsToJTableSwingWorker guestsToJTableSW1 = new GuestsToJTableSwingWorker(jTableGuests1.getModel());
        RoomsToJTableSwingWorker roomsToJTableSW = new RoomsToJTableSwingWorker(jTableRooms.getModel());
        RoomsToJTableSwingWorker roomsToJTableSW1 = new RoomsToJTableSwingWorker(jTableRooms1.getModel());
        ReservationsToJTableSwingWorker reservationsToJTableSW = new ReservationsToJTableSwingWorker(jTableReservations.getModel());
        
        guestsToJTableSW.execute();
        guestsToJTableSW1.execute();
        roomsToJTableSW.execute();
        roomsToJTableSW1.execute();
        reservationsToJTableSW.execute();
       
        
        setUpAllTablesHeaders();
        setAllTablesSelectionMode();
    }
    
    private void setAllTablesSelectionMode(){
        jTableRooms.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTableRooms1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTableGuests.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTableGuests1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTableReservations.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTableTopFiveSpenders.setRowSelectionAllowed(false);
    }
    
    private void setUpAllTablesHeaders(){
       jTableGuests.getTableHeader().setFont(new Font("Georgia", Font.BOLD, 12));
       jTableGuests1.getTableHeader().setFont(new Font("Georgia", Font.BOLD, 12));
       jTableRooms.getTableHeader().setFont(new Font("Georgia", Font.BOLD, 12));
       jTableRooms1.getTableHeader().setFont(new Font("Georgia", Font.BOLD, 12));
       jTableReservations.getTableHeader().setFont(new Font("Georgia", Font.BOLD, 12));
       jTableTopFiveSpenders.getTableHeader().setFont(new Font("Georgia", Font.BOLD, 12));
    }
    
    private Room createRoomFromStrings(String[] inVals){
        return createRoomFromStrings(Arrays.asList(inVals));
    }
    
    private Room createRoomFromStrings(List<String> inVals){
        Room room = new Room();
        room.setNumber(inVals.get(0));
        room.setCapacity(Integer.parseInt(inVals.get(1)));
        room.setFloor(Integer.parseInt(inVals.get(2)));
        room.setType(RoomType.valueOf(inVals.get(3)));
        room.setPrice(new BigDecimal(inVals.get(4)));
        return room;
    }
    
    private String getDuplRoomMsg(String errMsg){
        String[] errMsgParts = errMsg.split(" ");        
        return resourceBundle.getString("Pokoj_pridat_duplicita_cast1") + " " + errMsgParts[4]
               + " " + resourceBundle.getString("Pokoj_pridat_duplicita_cast2");
    }
    
    private String getInvalidRoomArgMsg(String errMsg, String oper){
            
        if(errMsg.toLowerCase().contains("room") && errMsg.toLowerCase().contains("has 0 or negative capacity")){
            return resourceBundle.getString("Pokoj_pridat_spatny_argument_kapacita");
        }
        
        if(errMsg.toLowerCase().contains("price") && errMsg.contains("0 or negative number")){
            return resourceBundle.getString("Pokoj_pridat_spatny_argument_cena");
        }
        
        if(errMsg.toLowerCase().contains("floor") && errMsg.contains("is 0 or negative number")){
            return resourceBundle.getString("Pokoj_pridat_spatny_argument_podlazi");
        }
        
        if(errMsg.contains("room number is in wrong format")){
            return resourceBundle.getString("Pokoj_pridat_spatny_argument_cislo");
        }
        
        return resourceBundle.getString("Pokoj_" + oper + "_spatny_argument_default");
    }
    
    private String checkAllRoomValuesWereFilledOut(String[] inVals){
        if(inVals[0].trim().isEmpty()){
            return resourceBundle.getString("Pokoj_pridat_nevyplneny_argument_cislo");
        }
        
        if(inVals[1].trim().isEmpty()){
            return resourceBundle.getString("Pokoj_pridat_nevyplneny_argument_kapacita");
        }
        
        if(inVals[2].trim().isEmpty()){
            return resourceBundle.getString("Pokoj_pridat_nevyplneny_argument_podlazi");
        }
        
        if(inVals[4].trim().isEmpty()){
            return resourceBundle.getString("Pokoj_pridat_nevyplneny_argument_cena");
        }
        
        return null;
    }
    
    private String getStringRoomType(String inType){
        
        switch(inType){
            case "APARTMENT"    :
            case "APARTM�N"     : return "APARTMENT";
                
            case "FAMILY"       :
            case "RODINN�"      : return "FAMILY";
                
            case "STANDARD"     :
            case "STANDARDN�"   :
            case "�TANDARD"     : return "STANDARD";
                
            case "SUITE"        : return "SUITE";
                
            default:
                logger.log(Level.SEVERE, "Creating new room failure: Filled unexpected type of room.");
                throw new IllegalStateException("Creating new room failure: Filled unexpected type of room.");
        }
    }
    
    private int makeARoomDeletionChoice(JTable table){
        if(table.getSelectedRow() != -1){
            Object[] options = {resourceBundle.getString("Ano"),
                                resourceBundle.getString("Ne")};
            int n = JOptionPane.showOptionDialog(null, resourceBundle.getString("Pokoj_smazat_dotazani_na_potvrzeni"),
                                                 resourceBundle.getString("Potvrzeni_operace"),
                                                 JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                                                 null, options, options[1]);
            return n;
        }else{
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Pokoj_smazat_nevybrany_zaznam"),
                                          resourceBundle.getString("Chybna_operace"), JOptionPane.ERROR_MESSAGE);
            return -1;
        }
    }
    
    private int makeAGuestDeletionChoice(JTable table){
        if(table.getSelectedRow() != -1){
            Object[] options = {resourceBundle.getString("Ano"),
                                resourceBundle.getString("Ne")};
            int n = JOptionPane.showOptionDialog(null, resourceBundle.getString("Host_smazat_dotazani_na_potvrzeni"),
                                                 resourceBundle.getString("Potvrzeni_operace"),
                                                 JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                                                 null, options, options[1]);
            return n;
        }else{
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Host_smazat_nevybrany_zaznam"),
                                          resourceBundle.getString("Chybna_operace"), JOptionPane.ERROR_MESSAGE);
            return -1;
        }
    }
    
    private int makeAReservationDeletionChoice(JTable table){
        if(table.getSelectedRow() != -1){
            Object[] options = {resourceBundle.getString("Ano"),
                                resourceBundle.getString("Ne")};
            int n = JOptionPane.showOptionDialog(null, resourceBundle.getString("Rezervace_smazat_dotazani_na_potvrzeni"),
                                                 resourceBundle.getString("Potvrzeni_operace"),
                                                 JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                                                 null, options, options[1]);
            return n;
        }else{
            JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_smazat_nevybrany_zaznam"),
                                          resourceBundle.getString("Chybna_operace"), JOptionPane.ERROR_MESSAGE);
            return -1;
        }
    }
    
    private Room getRoomFromTable(JTable table){
        int row = table.getSelectedRow();
        List<String> tabVals = new ArrayList<>();
        
        for(int col = 1; col < 5; col++){
            tabVals.add(table.getValueAt(row, col).toString());
        }
        
        tabVals.add(getNonFormattedPrice(table.getValueAt(row, 5).toString()));
        Room room = createRoomFromStrings(tabVals);
        
        return room;
    }
    
    private String getNonFormattedPrice(String formattedPrice){
        
        if(formattedPrice.contains("K\u010D") || formattedPrice.contains("\u20AC")){
            int lind = formattedPrice.lastIndexOf(" ");
            String price = formattedPrice.substring(0, lind);            
            price = price.replace("\u00A0", "");
            price = price.replace(",", ".");
            return price;
        }
        
        if(formattedPrice.contains("$")){
            String[] fpParts = formattedPrice.split("$", 2);
            String price = fpParts[1];
            return price.replaceAll(",", "");
        }
        
        logger.log(Level.SEVERE, "Updating room failure: In rooms JTable object appeared unexpected currency.");
        throw new IllegalStateException("Unexpected currency in rooms JTable object");
    }
    
    private int getRoomTypeIndex(RoomType roomType){
        switch(roomType){
            case APARTMENT  : return 0;
            case FAMILY     : return 1;
            case STANDARD   : return 2;
            case SUITE      : return 3;
            default: throw new IllegalStateException("Unexpected room type appeared");
        }
    }
    
    private String checkAllGuestValuesWereFilledOut(String[] inVals){
        if(inVals[0].trim().isEmpty()){
            return resourceBundle.getString("Host_pridat_nevyplneny_argument_jmeno");
        }
        
        if(inVals[1].trim().isEmpty()){
            return resourceBundle.getString("Host_pridat_nevyplneny_argument_cop");
        }
        
        return null;
    }
    
    private Guest createGuestFromStrings(String[] inVals){
        return createGuestFromStrings(Arrays.asList(inVals));
    }
    
    private Guest createGuestFromStrings(List<String> inVals){
        Guest guest = new Guest();
        String day = (Integer.parseInt(inVals.get(2)) > 9 ? inVals.get(2) : ("0" + inVals.get(2)));
        String month = (Integer.parseInt(inVals.get(3)) > 9 ? inVals.get(3) : ("0" + inVals.get(3)));
        String strDate = day + "/" + month + "/" + inVals.get(4);
        
        checkDateExists(strDate);
        
        guest.setName(inVals.get(0));
        guest.setIdCardNum(inVals.get(1));
        guest.setBorn(dateFromString(strDate));
        guest.setPhone((inVals.get(5).trim().isEmpty() ? null : inVals.get(5)));
        
        return guest;
    }
    
    private Guest getGuestFromTable(JTable table){
        int row = table.getSelectedRow();
        Guest guest = new Guest();
        
        guest.setName(table.getValueAt(row, 1).toString());
        guest.setIdCardNum(table.getValueAt(row, 2).toString());
        guest.setBorn(getDateFromTableStringDate(table.getValueAt(row, 3).toString()));
        guest.setPhone(table.getValueAt(row, 4) == null ? null : table.getValueAt(row, 4).toString());
        
        return guest;
    }
    
    private Date getDateFromTableStringDate(String inDate){
        Locale locale = Locale.getDefault();
        DateFormat inDateFormat = DateFormat.getDateInstance(DateFormat.MEDIUM, locale);
        Date date = null;
        try {
            date = inDateFormat.parse(inDate);
        } catch (ParseException ex) {
            logger.log(Level.SEVERE, "Table guest date-of-birth parsig failure: Unexpected date format present in jTable -> guest cannot be updated.");
            throw new RuntimeException("Unexpected date format present in jTable");
        }
        
        return date;
        
    }
    
    private Date dateFromString(String strDate){
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        try {            
            return dateFormat.parse(strDate);
        } catch (ParseException ex) {
            throw new RuntimeException(ex);
        }
    }
    
    private void checkDateExists(String strDate){

        try {
            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            format.setLenient(false);
            format.parse(strDate);
        } catch (ParseException | IllegalArgumentException e) {
            throw new IllegalArgumentException("Date does not exist (" + strDate + ")");
        }

    }
    
    private String getStringDateFromComboBoxes(String inDay, String inMonth, String inYear){
        return ((Integer.parseInt(inDay) > 9 ? inDay : ("0" + inDay)) + "/" +
                (Integer.parseInt(inMonth) > 9 ? inMonth : ("0" + inMonth)) + "/" + inYear);
    }
    
    private String[] getSplittedDateForComboBoxes(String tableStrDate){
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date date = getDateFromTableStringDate(tableStrDate);
        String strDate = dateFormat.format(date);
        
        return strDate.split("/");
    }
    
    private String getInvalidGuestArgMsg(String errMsg, String oper){
        if(errMsg.contains("Name of guest ")){
            return resourceBundle.getString("Host_pridat_spatny_argument_jmeno");
        }
        
        if(errMsg.contains("Phone number of guest ")){
            return resourceBundle.getString("Host_pridat_spatny_argument_tel");
        }
        
        if(errMsg.contains("Identification card number of guest")){
            return resourceBundle.getString("Host_pridat_spatny_argument_cop");
        }
        
        if(errMsg.contains("Date does not exist")){
            return resourceBundle.getString("Neexistujici_datum");
        }
        
        return resourceBundle.getString("Host_" + oper + "_spatny_argument_default");
    }
    
    private String getDuplGuestMsg(String errMsg){
        String[] errMsgParts = errMsg.split("\\[");
        String[] errSecMsgParts = errMsgParts[1].split("\\]");
        String[] guestInfo = errSecMsgParts[0].split("=");
        String name = guestInfo[2].split(",")[0];
        String idCard = guestInfo[3].split(",")[0];
        String born = guestInfo[4].split(",")[0];
        return resourceBundle.getString("Host_pridat_duplicita_cast1") + " " + name
               + resourceBundle.getString("Host_pridat_duplicita_cast2") + " " + born
               + resourceBundle.getString("Host_pridat_duplicita_cast3") + " " + idCard 
               + resourceBundle.getString("Host_pridat_duplicita_cast4") + ".";
    }
    
    private String getInvalidReservationArgMsg(String errMsg, String oper){
        if(errMsg.toLowerCase().contains("guest")){
            return getInvalidGuestArgMsg(errMsg, oper);
        }
        
        if(errMsg.toLowerCase().contains("room")){
            return getInvalidRoomArgMsg(errMsg, oper);
        }
        
        return resourceBundle.getString("Rezervace_" + oper + "_spatny_argument_default");
    }
    
    
    
    
    
    
    
//*************************************************************************************
//                                      SWINGWORKERS 
//*************************************************************************************    
    
    
    private class GuestsToJTableSwingWorker extends SwingWorker<List<Guest>, Void>{
        
        private final TableModel tableModel;
        
        public GuestsToJTableSwingWorker(TableModel tableModel){
            this.tableModel = tableModel;
        }
        
        @Override
        protected List<Guest> doInBackground() throws Exception {
            GuestManager guestManager = new GuestManagerImpl(dataSource);
            return guestManager.findAllGuests();            
        }
        
        @Override
        protected void done(){
            guestNewButton.setEnabled(true);
            guestEditButton.setEnabled(true);
            guestDeleteButton.setEnabled(true);
            guestSearchButton.setEnabled(true);
            if(!guestShowAllButton.isEnabled()){
                guestShowAllButton.setEnabled(true);
            }
            if(showAllGuestsSW != null){
                showAllGuestsSW = null;
            }
            GuestsTableModel guestsTableModel = (GuestsTableModel) tableModel;
            List<Guest> guests = null;
            try {
                guests = get();
            } catch (InterruptedException ex) {
                logger.log(Level.SEVERE, "Operation interrupted (this should never happen) in method 'doInBackgorund' in class 'GuestsToJTableSwingWorker'", ex);
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "Retrieving all guests from DB failure while trying to fulfill guests jTable - in method 'doInBackground' in class 'GuestsToJTableSwingWorker'", ex);
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Host_naplneni_tabulky_neuspech"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
            }
            
            if(guests != null && !guests.isEmpty()){
                for(Guest guest : guests){
                    guestsTableModel.addGuest(guest);
                }
            }
        }
        
    }
    
    private class RoomsToJTableSwingWorker extends SwingWorker<List<Room>, Void>{
        
        private final TableModel tableModel;
        
        public RoomsToJTableSwingWorker(TableModel tableModel){
            this.tableModel = tableModel;
        }
        
        @Override
        protected List<Room> doInBackground() throws Exception {
            RoomManager roomManager = new RoomManagerImpl(dataSource);
            return roomManager.findAllRooms();            
        }
        
        @Override
        protected void done(){
            roomNewButton.setEnabled(true);
            roomDeleteButton.setEnabled(true);
            roomEditButton.setEnabled(true);
            roomSearchButton.setEnabled(true);
            if(!roomShowAllButton.isEnabled()){
                roomShowAllButton.setEnabled(true);
            }
            if(showAllRoomsSW != null){
                showAllRoomsSW = null;
            }
            RoomsTableModel roomsTableModel = (RoomsTableModel) tableModel;
            List<Room> rooms = null;
            try {
                rooms = get();
            } catch (InterruptedException ex) {
                logger.log(Level.SEVERE, "Operation interrupted (this should never happen) in method 'doInBackgorund' in class 'RoomsToJTableSwingWorker'", ex);
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "Retrieving all rooms from DB failure while trying to fulfill rooms jTable - in method 'doInBackground' in class 'RoomsToJTableSwingWorker'", ex);
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Pokoj_naplneni_tabulky_neuspech"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
            }
            
            if(rooms != null && !rooms.isEmpty()){
                for(Room room : rooms){
                    roomsTableModel.addRoom(room);
                }
            }
        }
        
    }
    
    
    private class ReservationsToJTableSwingWorker extends SwingWorker<List<Reservation>, Void>{
        
        private final TableModel tableModel;
        
        public ReservationsToJTableSwingWorker(TableModel tableModel){
            this.tableModel = tableModel;
        }
        
        @Override
        protected List<Reservation> doInBackground() throws Exception {
            ReservationManager reservationManager = new ReservationManagerImpl(dataSource, new TimeManagerImpl());
            return reservationManager.findAllReservations();
        }
        
        @Override
        protected void done(){
            if(!reservShowAllButton.isEnabled()){
                reservShowAllButton.setEnabled(true);
            }
            if(showAllReservationsSW != null){
                showAllReservationsSW = null;
            }
            ReservationsTableModel reservationsTableModel = (ReservationsTableModel) tableModel;
            List<Reservation> reservations = null;
            try {
                reservations = get();
            } catch (InterruptedException ex) {
                logger.log(Level.SEVERE, "Operation interrupted (this should never happen) in method 'doInBackgorund' in class 'ReservstionsToJTableSwingWorker'", ex);
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "Retrieving all reservations from DB failure while trying to fulfill reservations jTable - in method 'doInBackground' in class 'ReservationsToJTableSwingWorker'", ex);
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_naplneni_tabulky_neuspech"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
            }
            
            if(reservations != null && !reservations.isEmpty()){
                for(Reservation reservation : reservations){
                    reservationsTableModel.addReservation(reservation);
                }
            }
        }
        
    }
    
    //************************************ ROOM *****************************************
    
    private class AddNewRoomSwingWorker extends SwingWorker<Room, Void>{

        private final String[] inVals;
        
        public AddNewRoomSwingWorker(String[] inVals){
            this.inVals = inVals;
        }
        
        @Override
        protected Room doInBackground() throws Exception {
            Room room = createRoomFromStrings(inVals);
            RoomManager roomManager = new RoomManagerImpl(dataSource);
            roomManager.createRoom(room);
            return room;
        }
        
        @Override
        protected void done(){
            roomNewSaveButton.setEnabled(true);
            roomEditButton.setEnabled(true);
            roomDeleteButton.setEnabled(true);
            roomSearchButton.setEnabled(true);
            addNewRoomSwingWorker = null;
            RoomsTableModel roomsTableModel = (RoomsTableModel) jTableRooms.getModel();
            RoomsTableModel roomsTableModel1 = (RoomsTableModel)jTableRooms1.getModel();
            Room room = null;
            List<String> msgs = new ArrayList<>();
            try{
                room = get();
            }catch(ExecutionException ex){
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'AddNewRoomSwingWorker': ", ex);
                msgs = getMessagesForDialogWindow(ex);
                JOptionPane.showMessageDialog(null, msgs.get(0), msgs.get(1), JOptionPane.ERROR_MESSAGE);                
            }catch(InterruptedException ex){
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            }
            
            if(room != null){
                roomsTableModel.addRoom(room);
                roomsTableModel1.addRoom(room);
            }
            
            if(msgs.isEmpty() || !msgs.get(1).equals(resourceBundle.getString("Neplatny_argument"))){
                CardLayout card = (CardLayout)roomMainPanel.getLayout();
                card.show(roomMainPanel, "emptyPanel");
            }
        }
        
        private List<String> getMessagesForDialogWindow(Throwable ex){
            List<String> msgs = new ArrayList<>();
            
            if(ex.toString().contains("IllegalArgumentException")){
                msgs.add(getInvalidRoomArgMsg(ex.getMessage(),"pridat"));
                msgs.add(resourceBundle.getString("Neplatny_argument"));
                return msgs;
            }
            
            if(ex.toString().contains("DuplicateRoomException")){
                msgs.add(getDuplRoomMsg(ex.getMessage()));
                msgs.add(resourceBundle.getString("Neplatny_argument"));
                return msgs;
            }
            
            msgs.add(resourceBundle.getString("Pokoj_pridat_interni_chyba"));
            msgs.add(resourceBundle.getString("Interni_chyba"));
            return msgs;
        }
    }
    
    private class DeleteRoomSwingWorker extends SwingWorker<Integer,Void>{

        @Override
        protected Integer doInBackground() throws Exception {
            int tableRow = jTableRooms.getSelectedRow();
            String roomNumber = jTableRooms.getValueAt(tableRow, 1).toString();
            RoomManager roomManager = new RoomManagerImpl(dataSource);
            Room room = roomManager.getRoomByNumber(roomNumber);
            
            if(room == null){
                throw new IllegalStateException("Internal error: Room with number " + roomNumber + " should "
                        + "be stored in DB, but it is not.");
            }
            roomManager.deleteRoom(room);
            
            return tableRow;
        }
        
        @Override
        protected void done(){
            roomDeleteButton.setEnabled(true);
            roomNewButton.setEnabled(true);
            roomEditButton.setEnabled(true);
            roomSearchButton.setEnabled(true);
            roomShowAllButton.setEnabled(true);
            deleteRoomSwingWorker = null;
            RoomsTableModel roomsTableModel = (RoomsTableModel)jTableRooms.getModel();
            RoomsTableModel roomsTableModel1 = (RoomsTableModel)jTableRooms1.getModel();
            Integer row = null;
            List<String> msgs;
            try {
                row = get();
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'DeleteRoomSwingWorker': ", ex);
                msgs = getMessagesForDialogWindow(ex);
                JOptionPane.showMessageDialog(null, msgs.get(0), msgs.get(1), (msgs.get(1).equals(resourceBundle.getString("Varovani")) ? JOptionPane.WARNING_MESSAGE : JOptionPane.ERROR_MESSAGE));
            } catch (InterruptedException ex) {
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            }
            
            if(row != null){
                roomsTableModel.removeRoom(row);
                roomsTableModel1.removeRoom(row);
            }
            
            jTableRooms.setRowSelectionAllowed(true);            
        }
        
        private List<String> getMessagesForDialogWindow(Throwable ex){
            List<String> msgs = new ArrayList<>();
            
            if(ex.toString().contains("IllegalArgumentException")){
                msgs.add(resourceBundle.getString("Pokoj_smazat_neplatne_hodnoty "));
                msgs.add(resourceBundle.getString("Interni_chyba"));
                return msgs;
            }
            
            if(ex.toString().contains("IllegalStateException")){
                msgs.add(resourceBundle.getString("Pokoj_smazat_neocekavane_neexistujici_pokoj_v_DB"));
                msgs.add(resourceBundle.getString("Interni_chyba"));
                return msgs;
            }
            
            if(ex.toString().contains("'RESROOM_FK'")){
                msgs.add(resourceBundle.getString("Pokoj_smazat_chyba_sql_cizi_klic"));
                msgs.add(resourceBundle.getString("Varovani"));
                return msgs;
            }
            
            msgs.add(resourceBundle.getString("Pokoj_smazat_chyba_sql"));
            msgs.add(resourceBundle.getString("Interni_chyba"));
            return msgs;
        }        
    }
    
    private class SetUpKeySwingWorker extends SwingWorker<Void, Void>{

        private Object entity;
        
        public SetUpKeySwingWorker(Object entObject){
            this.entity = entObject;
        }
        
        @Override
        protected Void doInBackground() throws Exception {
            if(entity instanceof Reservation){
                Reservation reservation = (Reservation) entity;
                Guest guest = getGuestDB(reservation.getGuest());
                Room room = getRoomDB(reservation.getRoom());
                reservation.setGuest(guest);
                ReservationManager resm = new ReservationManagerImpl(dataSource, new TimeManagerImpl());
                List<Reservation> resDB = resm.findReservationsForRoom(room);
                for(Reservation r : resDB){
                    if(r.getGuest().equals(reservation.getGuest()) &&
                       r.getStartTime().equals(reservation.getStartTime()) &&
                       r.getExpectedEndTime().equals(reservation.getExpectedEndTime()) &&
                       r.getServicesSpendings().equals(reservation.getServicesSpendings()) &&
                       (r.getRealEndTime() == null ? (reservation.getRealEndTime() == null) : r.getRealEndTime().equals(reservation.getRealEndTime()))){

                       resKey = r.getId();
                    }
                }
            }
            
            if(entity instanceof Room){
                Room room = (Room) entity;
                RoomManager rm = new RoomManagerImpl(dataSource);
                roomKey = rm.getRoomByNumber(room.getNumber()).getId();
                return null;
            }
            
            Guest guest = (Guest) entity;
            GuestManager gm = new GuestManagerImpl(dataSource);
            List<Guest> guestsDB = gm.findGuestByName(guest.getName());
            for(Guest g : guestsDB){
                if(g.getIdCardNum().equals(guest.getIdCardNum()) && g.getBorn().equals(guest.getBorn())){
                    if(g.getPhone() == null){
                        if(guest.getPhone() == null){
                            guestKey = g.getId();
                        }
                    }else{
                        if(g.getPhone().equals(guest.getPhone())){
                            guestKey = g.getId();
                        }
                    }
                }
            }
            
            return null;
        }
        
        @Override
        protected void done(){
            if(!roomEditButton.isEnabled()){
                roomEditButton.setEnabled(true);
            }
            
            if(!guestEditButton.isEnabled()){
                guestEditButton.setEnabled(true);
            }
            
            if(!reservEditButton.isEnabled()){
                reservEditButton.setEnabled(true);
            }
            setUpKeySwingWorker = null;
        }
        
        private Guest getGuestDB(Guest tableGuest){
            GuestManager guestManager = new GuestManagerImpl(dataSource);
            List<Guest> guests = guestManager.findGuestByName(tableGuest.getName());
            for(Guest guest : guests){
                if(guest.getIdCardNum().equals(tableGuest.getIdCardNum())){
                    return guest;
                }
            }
            return null;
        }
        
        private Room getRoomDB(Room tableRoom){
            RoomManager roomManager = new RoomManagerImpl(dataSource);
            return roomManager.getRoomByNumber(tableRoom.getNumber());
        }
        
    }
    
    private class UpdateRoomSwingWorker extends SwingWorker<Room, Void>{

        String[] inVals;
        
        public UpdateRoomSwingWorker(String[] inVals){
            this.inVals = inVals;
        }
        
        @Override
        protected Room doInBackground() throws Exception {
            RoomManager roomManager = new RoomManagerImpl(dataSource);            
            
            if(!isRoomNumberUnique(inVals[0], roomManager)){                
                throw new DuplicateRoomException("Room with number " + inVals[0] + " already exists in DB.");
            }
            
            Room origRoom = roomManager.getRoomById(roomKey);
            Room newRoom = createRoomFromStrings(inVals);    
                
            if(anyChange(origRoom, newRoom)){
                ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
                m_rowsRes = reservationsTableModel.getIndexOf(origRoom);
                newRoom.setId(roomKey);
                roomManager.updateRoom(newRoom);
                return newRoom;
            }
            
            return null;
        }
        
        @Override
        protected void done(){
            roomEditSaveButton.setEnabled(true);
            roomNewButton.setEnabled(true);
            roomDeleteButton.setEnabled(true);
            roomSearchButton.setEnabled(true);
            updateRoomSwingWorker = null;
            roomKey = null;
            RoomsTableModel roomsTableModel = (RoomsTableModel) jTableRooms.getModel();
            RoomsTableModel roomsTableModel1 = (RoomsTableModel) jTableRooms1.getModel();
            ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
            Room room = null;
            List<String> msgs = new ArrayList<>();
            try{
                room = get();
            }catch(ExecutionException ex){
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'UpdateRoomSwingWorker': ", ex);
                msgs = getMessagesForDialogWindow(ex);
                JOptionPane.showMessageDialog(null, msgs.get(0), msgs.get(1), JOptionPane.ERROR_MESSAGE);                
            }catch(InterruptedException ex){
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            }
            
            if(room != null){
                roomsTableModel.updateRoom(room, m_rowRoom);
                roomsTableModel1.updateRoom(room, m_rowRoom);
                for(Integer row : m_rowsRes){
                    reservationsTableModel.updateReservationRoom(room, row);
                }
            }
            
            m_rowRoom = -1;
            m_rowReservation = -1;
            jTableRooms.setRowSelectionAllowed(true);
            if(msgs.isEmpty() || !msgs.get(1).equals(resourceBundle.getString("Neplatny_argument"))){
                CardLayout card = (CardLayout)roomMainPanel.getLayout();
                card.show(roomMainPanel, "emptyPanel");
            }
        }
        
        private boolean isRoomNumberUnique(String number, RoomManager roomManager){
            Room room = roomManager.getRoomByNumber(number);
            if(room == null){
                return true;
            }
            return room.getId().equals(roomKey);
        }
        
        private boolean anyChange(Room origRoom, Room newRoom){
            return !(newRoom.getNumber().equals(origRoom.getNumber()) &&
                      newRoom.getCapacity() == origRoom.getCapacity() &&
                      newRoom.getFloor() == origRoom.getFloor() &&
                      newRoom.getType().equals(origRoom.getType()) &&
                      newRoom.getPrice().equals(origRoom.getPrice()));
        }
        
        private List<String> getMessagesForDialogWindow(Throwable ex){
            List<String> msgs = new ArrayList<>();
            
            if(ex.toString().contains("IllegalArgumentException")){
                msgs.add(getInvalidRoomArgMsg(ex.getMessage(),"upravit"));
                msgs.add(resourceBundle.getString("Neplatny_argument"));
                return msgs;
            }
            
            if(ex.toString().contains("DuplicateRoomException")){
                msgs.add(getDuplRoomMsg(ex.getMessage()));
                msgs.add(resourceBundle.getString("Neplatny_argument"));
                return msgs;
            }
            
            msgs.add(resourceBundle.getString("Pokoj_upravit_interni_chyba"));
            msgs.add(resourceBundle.getString("Interni_chyba"));
            return msgs;
        }
        
    }
    
    private class SearchRoomSwingWorker extends SwingWorker<List<Room>, Void>{

        private final int capacity;
        private final RoomType roomType;
        
        public SearchRoomSwingWorker(int capacity, String roomType){
            this.capacity = capacity;
            this.roomType = (roomType == null ? null : RoomType.valueOf(roomType));
        }
        
        @Override
        protected List<Room> doInBackground() throws Exception {
            RoomManager roomManager = new RoomManagerImpl(dataSource);
            
            if(capacity <= 0){
                return roomManager.findRoomsWithType(roomType);
            }
            
            if(roomType == null){
                return roomManager.findRoomsWithCapacity(capacity);
            }
            
            List<Room> allRooms = roomManager.findAllRooms();
            List<Room> rets = new ArrayList<>();
            
            for(Room room : allRooms){
                if(room.getCapacity() == capacity && room.getType().equals(roomType)){
                    rets.add(room);
                }
            }
            
            return rets;
        }
        
        @Override
        protected void done(){
            roomSearchSearchButton.setEnabled(true);            
            searchRoomSwingWorker = null;
            RoomsTableModel roomsTableModel = (RoomsTableModel)jTableRooms.getModel();
            List<Room> rooms = null;
            
            roomsTableModel.removeAllRoomsOnlyVisually();
            
            try {
                rooms = get();
            } catch (InterruptedException ex) {
                logger.log(Level.SEVERE, "Operation interrupted (this should never happen) in method 'doInBackgorund' in class 'SearchRoomSwingWorker'", ex);
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'SearchRoomSwingWorker': ", ex);
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Pokoj_hledat_ziskani_dat_neuspech"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
            }
            
            if(rooms != null && !rooms.isEmpty()){
                roomSearchCapacityTextField.setText("");
                for(Room room : rooms){
                    roomsTableModel.addRoom(room);
                }                
            }
        }
        
    }
    
    
    
    
  
    //*************************** GUESTS **********************************
    
    private class AddNewGuestSwingWorker extends SwingWorker<Guest, Void>{

        private final String[] inVals;
        
        public AddNewGuestSwingWorker(String[] inVals){
            this.inVals = inVals;
        }
        
        @Override
        protected Guest doInBackground() throws Exception {
            GuestManager guestManager = new GuestManagerImpl(dataSource);
            Guest guest = createGuestFromStrings(inVals);
            guestManager.createGuest(guest);
            return guest;            
        }
        
        @Override
        protected void done(){
            guestNewSaveButton.setEnabled(true);
            guestEditButton.setEnabled(true);
            guestDeleteButton.setEnabled(true);
            guestSearchButton.setEnabled(true);
            addNewGuestSwingWorker = null;
            GuestsTableModel guestsTableModel = (GuestsTableModel) jTableGuests.getModel();
            GuestsTableModel guestsTableModel1 = (GuestsTableModel)jTableGuests1.getModel();
            Guest guest = null;
            List<String> msgs = new ArrayList<>();
            try{
                guest = get();
            }catch(ExecutionException ex){
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'AddNewGuestSwingWorker': ", ex);
                msgs = getMessagesForDialogWindow(ex);
                JOptionPane.showMessageDialog(null, msgs.get(0), msgs.get(1), JOptionPane.ERROR_MESSAGE);                
            }catch(InterruptedException ex){
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            }
            
            if(guest != null){
                guestsTableModel.addGuest(guest);
                guestsTableModel1.addGuest(guest);
            }
            
            if(msgs.isEmpty() || !msgs.get(1).equals(resourceBundle.getString("Neplatny_argument"))){
                CardLayout card = (CardLayout)guestMainPanel.getLayout();
                card.show(guestMainPanel, "guestEmptyPanel");
            }
        }
        
        private List<String> getMessagesForDialogWindow(Throwable ex){
            List<String> msgs = new ArrayList<>();
            
            if(ex.toString().contains("IllegalArgumentException")){
                msgs.add(getInvalidGuestArgMsg(ex.getMessage(),"pridat"));
                msgs.add(resourceBundle.getString("Neplatny_argument"));
                return msgs;
            }
            
            if(ex.toString().contains("DuplicateGuestException")){
                msgs.add(getDuplGuestMsg(ex.getMessage()));
                msgs.add(resourceBundle.getString("Neplatny_argument"));
                return msgs;
            }
            
            msgs.add(resourceBundle.getString("Host_pridat_interni_chyba"));
            msgs.add(resourceBundle.getString("Interni_chyba"));
            return msgs;
        }
    }
    
    private class DeleteGuestSwingWorker extends SwingWorker<Integer, Void>{
        
        @Override
        protected Integer doInBackground() throws Exception {
            Guest guest = getSelectedGuestInTable();            
            deleteGuestFromDB(guest);
            return jTableGuests.getSelectedRow();
        }
        
        @Override
        protected void done(){
            guestDeleteButton.setEnabled(true);
            guestNewButton.setEnabled(true);
            guestEditButton.setEnabled(true);
            guestSearchButton.setEnabled(true);
            guestShowAllButton.setEnabled(true);
            deleteGuestSwingWorker = null;
            GuestsTableModel guestsTableModel = (GuestsTableModel) jTableGuests.getModel();
            GuestsTableModel guestsTableModel1 = (GuestsTableModel) jTableGuests1.getModel();
            Integer row = null;
            List<String> msgs;
            try {
                row = get();
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'DeleteGuestSwingWorker': ", ex);
                msgs = getMessagesForDialogWindow(ex);
                JOptionPane.showMessageDialog(null, msgs.get(0), msgs.get(1), (msgs.get(1).equals(resourceBundle.getString("Varovani")) ? JOptionPane.WARNING_MESSAGE : JOptionPane.ERROR_MESSAGE));
            } catch (InterruptedException ex) {
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            }
            
            if(row != null){
                guestsTableModel.removeGuest(row);
                guestsTableModel1.removeGuest(row);
            }
            
            jTableGuests.setRowSelectionAllowed(true);
        }
        
        private void deleteGuestFromDB(Guest tableGuest){
            GuestManager guestManager = new GuestManagerImpl(dataSource);
            List<Guest> allGuests = guestManager.findGuestByName(tableGuest.getName());
            String cardID = tableGuest.getIdCardNum();
            Date born = tableGuest.getBorn();
            
            for(Guest guest : allGuests){
                if(guest.getIdCardNum().equals(cardID) && guest.getBorn().equals(born)){
                    guestManager.deleteGuest(guest);
                    return;
                }
            }
            
        }
        
        private Guest getSelectedGuestInTable() {
            int row = jTableGuests.getSelectedRow();
            String guestName = jTableGuests.getValueAt(row, 1).toString();
            String cardID = jTableGuests.getValueAt(row, 2).toString();
            String strBorn = jTableGuests.getValueAt(row, 3).toString();
            Locale locale = Locale.getDefault();
            DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.MEDIUM, locale);
            Date born;
            Guest guest = new Guest();
            
            try {
                born = dateFormat.parse(strBorn);
            } catch (ParseException ex) {
                logger.log(Level.SEVERE, "Unexpected format of date-of-birth of guest - unsuccessful date parsing.");
                throw new IllegalStateException("Unexpected format of date-of-birth of guest - unsuccessful date parsing");
            }

            guest.setName(guestName);
            guest.setIdCardNum(cardID);
            guest.setBorn(born);

            return guest;
        }
        
        private List<String> getMessagesForDialogWindow(Throwable ex){
            List<String> msgs = new ArrayList<>();
            
            if(ex.toString().contains("IllegalArgumentException")){
                msgs.add(resourceBundle.getString("Host_smazat_neplatne_hodnoty "));
                msgs.add(resourceBundle.getString("Interni_chyba"));
                return msgs;
            }
            
            if(ex.toString().contains("IllegalStateException")){
                msgs.add(resourceBundle.getString("Host_smazat_neocekavane_neexistujici_host_v_DB"));
                msgs.add(resourceBundle.getString("Interni_chyba"));
                return msgs;
            }
            
            if(ex.toString().contains("'RESGUEST_FK'")){
                msgs.add(resourceBundle.getString("Host_smazat_chyba_sql_cizi_klic"));
                msgs.add(resourceBundle.getString("Varovani"));
                return msgs;
            }
            
            msgs.add(resourceBundle.getString("Host_smazat_chyba_sql"));
            msgs.add(resourceBundle.getString("Interni_chyba"));
            return msgs;
        }        
    }
    
    
    
    
    
    
    
    
    private class UpdateGuestSwingWorker extends SwingWorker<Guest, Void>{

        String[] inVals;
        
        public UpdateGuestSwingWorker(String[] inVals){
            this.inVals = inVals;
        }
        
        @Override
        protected Guest doInBackground() throws Exception {
            GuestManager guestManager = new GuestManagerImpl(dataSource);            
            
            if(!isGuestUnique()){                
                throw new DuplicateGuestException("Guest with personal info: name = " + inVals[0] + ", idCardNum = " +
                        inVals[1] + ", date-of-birth = " + (Integer.parseInt(inVals[2]) > 9 ? inVals[2] : ("0" + inVals[2])) +
                        "/" + (Integer.parseInt(inVals[3]) > 9 ? inVals[3] : ("0" + inVals[3])) + "/" + inVals[4]
                        + " already exists in DB.");
            }
            
            Guest origGuest = guestManager.getGuestById(guestKey);
            Guest newGuest = createGuestFromStrings(inVals);
                
            if(anyChange(origGuest, newGuest)){
                ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
                m_rowsRes = reservationsTableModel.getIndexOf(origGuest);
                newGuest.setId(guestKey);
                guestManager.updateGuest(newGuest);
                return newGuest;
            }
            
            return null;
        }
        
        @Override
        protected void done(){
            guestEditSaveButton.setEnabled(true);
            guestNewButton.setEnabled(true);
            guestDeleteButton.setEnabled(true);
            guestSearchButton.setEnabled(true);
            updateGuestSwingWorker = null;
            guestKey = null;
            GuestsTableModel guestsTableModel = (GuestsTableModel) jTableGuests.getModel();
            GuestsTableModel guestsTableModel1 = (GuestsTableModel) jTableGuests1.getModel();
            ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
            Guest guest = null;
            List<String> msgs = new ArrayList<>();
            try{
                guest = get();
            }catch(ExecutionException ex){
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'UpdateGuestSwingWorker': ", ex);
                msgs = getMessagesForDialogWindow(ex);
                JOptionPane.showMessageDialog(null, msgs.get(0), msgs.get(1), JOptionPane.ERROR_MESSAGE);                
            }catch(InterruptedException ex){
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            }
            
            if(guest != null){
                guestsTableModel.updateGuest(guest, m_rowGuest);
                guestsTableModel1.updateGuest(guest, m_rowGuest);
                for(Integer row : m_rowsRes){
                    reservationsTableModel.updateReservationGuest(guest, row);
                }
            }
            
            m_rowGuest = -1;
            m_rowReservation = -1;
            jTableGuests.setRowSelectionAllowed(true);
            if(msgs.isEmpty() || !msgs.get(1).equals(resourceBundle.getString("Neplatny_argument"))){
                CardLayout card = (CardLayout)guestMainPanel.getLayout();
                card.show(guestMainPanel, "guestEmptyPanel");
            }
        }
        
        private boolean isGuestUnique(){
            GuestManager guestManager = new GuestManagerImpl(dataSource);
            String name = inVals[0];
            String idCardNum = inVals[1];
            String strBorn = (Integer.parseInt(inVals[2]) > 9 ? inVals[2] : ("0" + inVals[2])) + "/" +
                             (Integer.parseInt(inVals[3]) > 9 ? inVals[3] : ("0" + inVals[3])) + "/" + inVals[4];                             
            DateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            Date born;
            try {
                born = format.parse(strBorn);
            } catch (ParseException ex) {
                logger.log(Level.SEVERE, "Wrong string date parsing while determining uniqueness of guest during updating this guest in DB.");
                throw new RuntimeException("Wrong string date parsing while determining uniqueness of guest during updating this guest in DB.");
            }
            
            List<Guest> guests = guestManager.findGuestByName(name);
            
            for(Guest guest : guests){
                if(guest.getIdCardNum().equals(idCardNum) && guest.getBorn().equals(born)){
                    return guest.getId().equals(guestKey);
                }
            }
            
            return true;
        }
        
        private boolean anyChange(Guest origGuest, Guest newGuest){
            return !(newGuest.getName().equals(origGuest.getName()) &&
                     newGuest.getIdCardNum().equals(origGuest.getIdCardNum()) &&
                     newGuest.getBorn().equals(origGuest.getBorn()) &&
                     (newGuest.getPhone() == null ? (origGuest.getPhone() == null) :
                        newGuest.getPhone().equals(origGuest.getPhone())));
        }
        
        private List<String> getMessagesForDialogWindow(Throwable ex){
            List<String> msgs = new ArrayList<>();
            
            if(ex.toString().contains("IllegalArgumentException")){
                msgs.add(getInvalidGuestArgMsg(ex.getMessage(),"upravit"));
                msgs.add(resourceBundle.getString("Neplatny_argument"));
                return msgs;
            }
            
            if(ex.toString().contains("DuplicateGuestException")){
                msgs.add(getDuplGuestMsg(ex.getMessage()));
                msgs.add(resourceBundle.getString("Neplatny_argument"));
                return msgs;
            }
            
            msgs.add(resourceBundle.getString("Host_upravit_interni_chyba"));
            msgs.add(resourceBundle.getString("Interni_chyba"));
            return msgs;
        }
        
    }
    
    private class SearchGuestSwingWorker extends SwingWorker<List<Guest>, Void>{

        private final String name;
        
        public SearchGuestSwingWorker(String name){
            this.name = name;
        }
        
        @Override
        protected List<Guest> doInBackground() throws Exception {
            GuestManager guestManager = new GuestManagerImpl(dataSource);
            return guestManager.findGuestByName(name);
        }
        
        @Override
        protected void done(){
            guestSearchSearchButton.setEnabled(true);            
            searchGuestSwingWorker = null;
            GuestsTableModel guestsTableModel = (GuestsTableModel)jTableGuests.getModel();
            List<Guest> guests = null;
            
            guestsTableModel.removeAllGuestsOnlyVisually();
            
            try {
                guests = get();
            } catch (InterruptedException ex) {
                logger.log(Level.SEVERE, "Operation interrupted (this should never happen) in method 'doInBackgorund' in class 'SearchGuestSwingWorker'", ex);
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'SearchRoomSwingWorker': ", ex);
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Host_hledat_ziskani_dat_neuspech"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
            }
            
            if(guests != null && !guests.isEmpty()){
                guestSearchNameTextField.setText("");
                for(Guest guest : guests){
                    guestsTableModel.addGuest(guest);
                }
            }
        }        
    }
    
    
    
    
    
    
    //*************************** RESERVATIONS ***************************************
    
    private class AddNewReservationSwingWorker extends SwingWorker<Reservation, Void>{
        
        @Override
        protected Reservation doInBackground() throws Exception {
            RoomManager roomManager = new RoomManagerImpl(dataSource);
            Room room = roomManager.getRoomByNumber(jTableRooms1.getValueAt(m_rowRoom, 1).toString());
            Guest tableGuest = getGuestFromTable(jTableGuests1);
            Guest guest = getGuestFromDB(tableGuest);
            ReservationManager reservationManager = new ReservationManagerImpl(dataSource, new TimeManagerImpl());
            Reservation reservation = new Reservation();
            
            if(room == null){
                logger.log(Level.SEVERE, "Adding new reservation into DB failure: Room chosen from jTable does not exist in DB");
                throw new IllegalStateException("Adding new reservation into DB failure: Room chosen from jTable does not exist in DB");
            }
            
            if(guest == null){
                logger.log(Level.SEVERE, "Adding new reservation into DB failure: Guest chosen from jTable does not exist in DB");
                throw new IllegalStateException("Adding new reservation into DB failure: Guest chosen from jTable does not exist in DB");
            }
            
            reservation.setRoom(room);
            reservation.setGuest(guest);
            reservation.setStartTime(dateFrom);
            reservation.setExpectedEndTime(dateTo);
            reservation.setRealEndTime(null);
            reservation.setServicesSpendings(BigDecimal.ZERO);
            
            reservationManager.createReservation(reservation);
            
            return reservation;
        }
        
        @Override
        protected void done(){
            reservNewStepTwoSaveButton.setEnabled(true);
            reservNewStepOneNextButton.setEnabled(true);
            reservEditButton.setEnabled(true);
            reservDeleteButton.setEnabled(true);
            reservSearchButton.setEnabled(true);
            addNewReservationSwingWorker = null;
            jTableRooms1.setRowSelectionAllowed(true);
            jTableGuests1.setRowSelectionAllowed(true);
            ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
            Reservation reservation = null;
            List<String> msgs = new ArrayList<>();
            try{
                reservation = get();
            }catch(ExecutionException ex){
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'AddNewReservationSwingWorker': ", ex);
                msgs = getMessagesForDialogWindow(ex);
                JOptionPane.showMessageDialog(null, msgs.get(0), msgs.get(1), JOptionPane.ERROR_MESSAGE);                
            }catch(InterruptedException ex){
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            }
            
            if(reservation != null){
                reservationsTableModel.addReservation(reservation);
            }
            
            if(msgs.isEmpty() || !msgs.get(1).equals(resourceBundle.getString("Neplatny_argument"))){
                CardLayout card = (CardLayout)reservationMainPanel.getLayout();
                card.show(reservationMainPanel, "reservationEmptyPanel");
            }
        }
        
        private Guest getGuestFromDB(Guest tableGuest){
            GuestManager guestManager = new GuestManagerImpl(dataSource);
            List<Guest> guests = guestManager.findGuestByName(tableGuest.getName());
            
            for(Guest guest : guests){
                if(guest.getIdCardNum().equals(tableGuest.getIdCardNum()) &&
                        guest.getBorn().equals(tableGuest.getBorn())){
                    if(guest.getPhone() == null){
                        if(tableGuest.getPhone() == null){
                            return guest;
                        }
                    }else{
                        if(guest.getPhone().equals(tableGuest.getPhone())){
                            return guest;
                        }
                    }
                }
            }
            
            return null;
        }
        
        private List<String> getMessagesForDialogWindow(Throwable ex){
            List<String> msgs = new ArrayList<>();
            
            if(ex.toString().contains("IllegalArgumentException")){
                msgs.add(getInvalidReservationArgMsg(ex.getMessage(),"pridat"));
                msgs.add(resourceBundle.getString("Neplatny_argument"));
                return msgs;
            }
            
            msgs.add(resourceBundle.getString("Rezervace_pridat_interni_chyba"));
            msgs.add(resourceBundle.getString("Interni_chyba"));
            return msgs;
        }
    }
    
    private class DeleteReservationSwingWorker extends SwingWorker<Integer, Object>{

        @Override
        protected Integer doInBackground() throws Exception {
            ReservationManager reservationManager = new ReservationManagerImpl(dataSource, new TimeManagerImpl());            
            Reservation tableRes = getSelectedTableReservation();
            List<Reservation> allReservations = reservationManager.findReservationsForRoom(tableRes.getRoom());
            
            for(Reservation reservation : allReservations){
                if(reservation.getGuest().equals(tableRes.getGuest()) &&
                        reservation.getStartTime().equals(tableRes.getStartTime()) &&
                        reservation.getExpectedEndTime().equals(tableRes.getExpectedEndTime())){
                    reservationManager.deleteReservation(reservation);
                    return jTableReservations.getSelectedRow();
                }
            }
            
            return -1;
        }
        
        @Override
        protected void done(){
            reservDeleteButton.setEnabled(true);
            reservNewButton.setEnabled(true);
            reservEditButton.setEnabled(true);
            reservSearchButton.setEnabled(true);
            reservShowAllButton.setEnabled(true);
            jTableReservations.setRowSelectionAllowed(true);
            deleteReservationSwingWorker = null;
            ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
            List<String> msgs = null;
            int row = -1;
            try {
                row = get();
            } catch (InterruptedException ex) {
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'DeleteGuestSwingWorker': ", ex);
                msgs = getMessagesForDialogWindow(ex);
                JOptionPane.showMessageDialog(null, msgs.get(0), msgs.get(1), JOptionPane.ERROR_MESSAGE);
            }
            
            if(row != -1){
                reservationsTableModel.removeReservation(row);
            }
            
            /*showActualReservationsSwingWorker = new ShowActualReservationsSwingWorker();
            showActualReservationsSwingWorker.execute();*/
        }
        
        private Reservation getSelectedTableReservation(){
            int tableRow = jTableReservations.getSelectedRow();
            RoomManager roomManager = new RoomManagerImpl(dataSource);
            GuestManager guestManager = new GuestManagerImpl(dataSource);
            List<Guest> guests = guestManager.findGuestByName(jTableReservations.getValueAt(tableRow, 2).toString());
            Room room = roomManager.getRoomByNumber(jTableReservations.getValueAt(tableRow, 1).toString());
            Guest guest = null;
            String cardID = jTableReservations.getValueAt(tableRow, 3).toString();
            
            for(Guest g : guests){
                if(g.getIdCardNum().equals(cardID)){
                    guest = g;
                    break;
                }
            }
            
            if(room == null){
                throw new RuntimeException("Room from jTableReservations is not present in DB, but should be");
            }
            
            if(guest == null){
                throw new RuntimeException("Guest from jTableReservations is not present in DB, but should be");
            }
            
            Date startTime = getDateFromTableStringDate(jTableReservations.getValueAt(tableRow, 4).toString());
            Date expEndTime = getDateFromTableStringDate(jTableReservations.getValueAt(tableRow, 5).toString());
            
            Reservation reservation = new Reservation();
            reservation.setGuest(guest);
            reservation.setRoom(room);
            reservation.setStartTime(startTime);
            reservation.setExpectedEndTime(expEndTime);
            
            return reservation;
        }
        
        private List<String> getMessagesForDialogWindow(Throwable ex){
            List<String> msgs = new ArrayList<>();
            
            if(ex.toString().contains("IllegalArgumentException")){
                msgs.add(resourceBundle.getString("Rezervace_smazat_neplatne_hodnoty "));
                msgs.add(resourceBundle.getString("Interni_chyba"));
                return msgs;
            }
            
            msgs.add(resourceBundle.getString("Rezervace_smazat_chyba_sql"));
            msgs.add(resourceBundle.getString("Interni_chyba"));
            return msgs;
        }
    }
    
    private class SearchReservationSwingWorker extends SwingWorker<List<Reservation>, Object>{

        private final Guest guest;
        private final Room room;
        
        public SearchReservationSwingWorker(Guest guest, Room room){
            this.guest = getGuestFromDB(guest);
            
            if(room == null){
                this.room = null;
            }else{
                RoomManager roomManager = new RoomManagerImpl(dataSource);
                this.room = roomManager.getRoomByNumber(room.getNumber());
            }            
        }
        
        @Override
        protected List<Reservation> doInBackground() throws Exception {
            ReservationManager reservationManager = new ReservationManagerImpl(dataSource, new TimeManagerImpl());            
            
            if(guest == null){
                if(room != null){
                    return reservationManager.findReservationsForRoom(room);
                }
                return null;
            }
            
            if(room == null){
                return reservationManager.findReservationsForGuest(guest);
            }
            
            List<Reservation> reservations = reservationManager.findAllReservations();
            List<Reservation> retRes = new ArrayList<>();
            for(Reservation reservation : reservations){
                if(reservation.getGuest().equals(guest) && reservation.getRoom().equals(room)){
                    retRes.add(reservation);
                }
            }
            
            return retRes;
        }
        
        @Override
        protected void done(){
            reservSearchSearchButton.setEnabled(true);
            searchReservationSwingWorker = null;
            ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
            List<Reservation> reservations = null;
            
            reservationsTableModel.removeAllReservationsOnlyVisually();
            
            try {
                reservations = get();
            } catch (InterruptedException ex) {
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'SearchReservationSwingWorker': ", ex);
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_hledat_ziskani_dat_neuspech"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
            }
            
            if(reservations != null && !reservations.isEmpty()){
                for(Reservation reservation : reservations){
                    reservationsTableModel.addReservation(reservation);
                }
            }
        }
        
        private Guest getGuestFromDB(Guest guest){
            if(guest != null){
                GuestManager guestManager = new GuestManagerImpl(dataSource);
                List<Guest> guests = guestManager.findGuestByName(guest.getName());
                for(Guest g : guests){
                    if(g.getIdCardNum().equals(guest.getIdCardNum()) && g.getBorn().equals(guest.getBorn())){
                        return g;
                    }
                }
            }
            return null;
        }
    }
    
    private class TableRoomRowSwingWorker extends SwingWorker<Room, Object>{

        private final String number;
        
        public TableRoomRowSwingWorker(String number){
            this.number = number;
        }
        
        @Override
        protected Room doInBackground() throws Exception {
            RoomManager roomManager = new RoomManagerImpl(dataSource);
            return roomManager.getRoomByNumber(number);
        }
        
        @Override
        protected void done(){
            tableRoomRowSwingWorker = null;
            RoomsTableModel roomsTableModel = (RoomsTableModel)jTableRooms1.getModel();
            Room room = null;
            try {
                room = get();
            } catch (InterruptedException ex) {
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'TableRoomRowSwingWorker': ", ex);
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_upravit_ziskani_pokoje_neuspech"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
            }
            
            int row = (room != null ? roomsTableModel.getIndexOf(room) : -1);
            if(row >= 0){
                jTableRooms1.setRowSelectionInterval(row, row);
            }
        }
        
    }
    
    private class TableGuestRowSwingWorker extends SwingWorker<Guest, Object>{

        private final String name;
        private final String cardID;
        
        public TableGuestRowSwingWorker(String name, String cardID){
            this.name = name;
            this.cardID = cardID;
        }
        
        @Override
        protected Guest doInBackground() throws Exception {
            GuestManager guestManager = new GuestManagerImpl(dataSource);
            List<Guest> guests = guestManager.findGuestByName(name);
            for(Guest guest : guests){
                if(guest.getIdCardNum().equals(cardID)){
                    return guest;
                }
            }
            return null;
        }
        
        @Override
        protected void done(){
            tableGuestRowSwingWorker = null;
            GuestsTableModel guestsTableModel = (GuestsTableModel)jTableGuests1.getModel();
            Guest guest = null;
            try {
                guest = get();
            } catch (InterruptedException ex) {
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'TableRoomRowSwingWorker': ", ex);
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_upravit_ziskani_hosta_neuspech"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
            }
            
            int row = (guest != null ? guestsTableModel.getIndexOf(guest) : -1);
            if(row >= 0){
                jTableGuests1.setRowSelectionInterval(row, row);
            }
        }
        
    }
    
    private class UpdateReservationSwingWorker extends SwingWorker<Reservation, Object>{

        private final Guest guest;
        private final Room room;
        private final String[] inVals;
        
        public UpdateReservationSwingWorker(Guest guest, Room room, String[] inVals){
            this.guest = getGuestDB(guest);
            this.room = getRoomDB(room);
            this.inVals = inVals;
        }
        
        @Override
        protected Reservation doInBackground() throws Exception {
            ReservationManager reservationManager = new ReservationManagerImpl(dataSource, new TimeManagerImpl());
            Reservation newRes = setUpReservation();
            Reservation origRes = reservationManager.getReservationById(resKey);
            
            if(anyChange(origRes, newRes)){
                ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
                m_rowReservation = reservationsTableModel.getIndexOf(origRes);
                newRes.setId(resKey);
                reservationManager.updateReservation(newRes);
                return newRes;
            }
            return null;
        }
        
        @Override
        protected void done(){
            reservEditSaveButton.setEnabled(true);
            reservNewButton.setEnabled(true);
            reservDeleteButton.setEnabled(true);
            reservSearchButton.setEnabled(true);
            updateReservationSwingWorker = null;
            jTableRooms1.setRowSelectionAllowed(true);
            jTableGuests1.setRowSelectionAllowed(true);
            jTableReservations.setRowSelectionAllowed(true);
            ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
            Reservation reservation = null;
            List<String> msgs = new ArrayList<>();
            try {
                reservation = get();
            } catch (InterruptedException ex) {
                Logger.getLogger(TestJFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'UpdateReservationSwingWorker': ", ex);
                msgs = getMessagesForDialogWindow(ex);
                JOptionPane.showMessageDialog(null, msgs.get(0), msgs.get(1), JOptionPane.ERROR_MESSAGE);
            }
            
            if(reservation != null){
                reservationsTableModel.updateReservation(reservation, m_rowReservation);
            }
            m_rowReservation = -1;
            
            if(msgs.isEmpty() || !msgs.get(1).equals(resourceBundle.getString("Neplatny_argument"))){
                CardLayout card = (CardLayout)reservationMainPanel.getLayout();
                card.show(reservationMainPanel, "reservationEmptyPanel");
                CardLayout tableCard = (CardLayout)reservationTables.getLayout();
                tableCard.show(reservationTables, "reservationMainTable");
            }
        }
        
        private Guest getGuestDB(Guest tableGuest){
            GuestManager guestManager = new GuestManagerImpl(dataSource);
            List<Guest> guests = guestManager.findGuestByName(tableGuest.getName());
            for(Guest lguest : guests){
                if(lguest.getIdCardNum().equals(tableGuest.getIdCardNum())){
                    return lguest;
                }
            }
            return null;
        }
        
        private Room getRoomDB(Room tableRoom){
            RoomManager roomManager = new RoomManagerImpl(dataSource);
            return roomManager.getRoomByNumber(tableRoom.getNumber());
        }
        
        private Reservation setUpReservation(){
            Reservation reservation = new Reservation();
            
            reservation.setGuest(guest);
            reservation.setRoom(room);
            reservation.setStartTime(dateFromString(inVals[0]));
            reservation.setExpectedEndTime(dateFromString(inVals[1]));
            reservation.setRealEndTime(inVals.length == 3 ? null : dateFromString(inVals[2]));
            reservation.setServicesSpendings(inVals.length == 3 ? new BigDecimal(inVals[2]) : new BigDecimal(inVals[3]));
            
            return reservation;
        }
        
        private boolean anyChange(Reservation origRes, Reservation newRes){
            return !(origRes.getGuest().equals(newRes.getGuest()) &&
                    origRes.getRoom().equals(newRes.getRoom()) &&
                    origRes.getStartTime().equals(newRes.getStartTime()) &&
                    origRes.getExpectedEndTime().equals(newRes.getExpectedEndTime()) &&
                    origRes.getServicesSpendings().equals(newRes.getServicesSpendings()) &&
                    (origRes.getRealEndTime() == null ? (newRes.getRealEndTime() == null) : (origRes.getRealEndTime().equals(newRes.getRealEndTime()))));
        }
        
        private List<String> getMessagesForDialogWindow(Throwable ex){
            List<String> msgs = new ArrayList<>();
            
            if(ex.toString().contains("IllegalArgumentException")){
                msgs.add(getInvalidReservationArgMsg(ex.getMessage(),"upravit"));
                msgs.add(resourceBundle.getString("Neplatny_argument"));
                return msgs;
            }
            
            msgs.add(resourceBundle.getString("Rezervace_upravit_interni_chyba"));
            msgs.add(resourceBundle.getString("Interni_chyba"));
            return msgs;
        }
    }
    
    private class UnoccupiedRoomsSwingWorker extends SwingWorker<List<Room>, Object>{

        @Override
        protected List<Room> doInBackground() throws Exception {
            ReservationManager reservationManager = new ReservationManagerImpl(dataSource, new TimeManagerImpl());
            return reservationManager.findAllUnoccupiedRooms(dateFrom, dateTo);
        }
        
        @Override
        protected void done(){
            reservNewStepOneNextButton.setEnabled(true);
            unoccupiedRoomsSwingWorker = null;
            RoomsTableModel roomsTableModel = (RoomsTableModel)jTableRooms1.getModel();
            List<Room> rooms = null;
            
            roomsTableModel.removeAllRoomsOnlyVisually();
            
            try {
                rooms = get();
            } catch (InterruptedException ex) {
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'UnoccupiedRoomsSwingWorker': ", ex);
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_pridat_hledani_volne_pokoje_chyba"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);                
            }
            if(rooms.isEmpty()){
                System.out.println("Empty rooms - probably bad query in DB / dateFrom = " + dateFrom + " / dateTo = " + dateTo);
            }
            for(Room room : rooms){
                roomsTableModel.addRoom(room);
            }
            
            jTableGuests1.setRowSelectionAllowed(true);
            jTableRooms1.setRowSelectionAllowed(true);
            
            CardLayout card = (CardLayout)reservationMainPanel.getLayout();
            card.show(reservationMainPanel, "reservationNewPanel");
        }        
    }
    
    private class ShowPastReservationsSwingWorker extends SwingWorker<List<Reservation>, Object>{

        @Override
        protected List<Reservation> doInBackground() throws Exception {
            ReservationManager reservationManager = new ReservationManagerImpl(dataSource, new TimeManagerImpl());
            List<Reservation> allReservations = reservationManager.findAllReservations();
            List<Reservation> pastReservations = new ArrayList<>();
            
            for(Reservation reservation : allReservations){
                if(reservation.getRealEndTime() != null){
                    pastReservations.add(reservation);
                }
            }
            
            return pastReservations;
        }
        
        @Override
        protected void done(){
            reservPastButton.setEnabled(true);
            reservPastButtonInActual.setEnabled(true);
            showPastReservationsSwingWorker = null;
            ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
            List<Reservation> reservations = null;
            
            reservationsTableModel.removeAllReservationsOnlyVisually();
            
            try {
                reservations = get();
            } catch (InterruptedException ex) {
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'ShowPastReservationsSwingWorker': ", ex);
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_ukaz_ukoncene_chyba"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
            }
            
            if(reservations != null && !reservations.isEmpty()){
                for(Reservation reservation : reservations){
                    reservationsTableModel.addReservation(reservation);
                }
            }
        }        
    }
    
    private class ShowFutureReservationsSwingWorker extends SwingWorker<List<Reservation>, Object>{

        @Override
        protected List<Reservation> doInBackground() throws Exception {
            ReservationManager reservationManager = new ReservationManagerImpl(dataSource, new TimeManagerImpl());
            List<Reservation> allReservations = reservationManager.findAllReservations();
            List<Reservation> futureReservations = new ArrayList<>();
            TimeManager timeManager = new TimeManagerImpl();
            Date currentDate = timeManager.getCurrentDate();
            
            for(Reservation reservation : allReservations){
                if(reservation.getStartTime().getTime() > currentDate.getTime() &&
                        reservation.getRealEndTime() == null){
                    futureReservations.add(reservation);
                }
            }
            
            return futureReservations;
        }
        
        @Override
        protected void done(){
            reservFutureButton.setEnabled(true);
            reservFutureButtonInActual.setEnabled(true);
            showFutureReservationsSwingWorker = null;
            ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
            List<Reservation> reservations = null;
            
            reservationsTableModel.removeAllReservationsOnlyVisually();
            
            try {
                reservations = get();
            } catch (InterruptedException ex) {
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'ShowFutureReservationsSwingWorker': ", ex);
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_ukaz_budouci_chyba"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
            }
            
            if(reservations != null && !reservations.isEmpty()){
                for(Reservation reservation : reservations){
                    reservationsTableModel.addReservation(reservation);
                }
            }
        }        
    }
    
    private class ShowActualReservationsSwingWorker extends SwingWorker<List<Reservation>, Object>{

        @Override
        protected List<Reservation> doInBackground() throws Exception {
            ReservationManager reservationManager = new ReservationManagerImpl(dataSource, new TimeManagerImpl());
            List<Reservation> allReservations = reservationManager.findAllReservations();
            List<Reservation> actualReservations = new ArrayList<>();
            TimeManager timeManager = new TimeManagerImpl();
            Date currentDate = timeManager.getCurrentDate();
            
            for(Reservation reservation : allReservations){
                if(reservation.getStartTime().getTime() <= currentDate.getTime() &&
                        reservation.getRealEndTime() == null){
                    actualReservations.add(reservation);
                }
            }
            
            return actualReservations;
        }
        
        @Override
        protected void done(){
            reservActualButton.setEnabled(true);
            showActualReservationsSwingWorker = null;
            ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
            List<Reservation> reservations = null;
            
            reservationsTableModel.removeAllReservationsOnlyVisually();
            
            try {
                reservations = get();
            } catch (InterruptedException ex) {
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'ShowFutureReservationsSwingWorker': ", ex);
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Rezervace_ukaz_aktualni_chyba"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
            }
            
            if(reservations != null && !reservations.isEmpty()){
                for(Reservation reservation : reservations){
                    reservationsTableModel.addReservation(reservation);
                }
            }
            
            showTopFiveSpendersSwingWorker = new ShowTopFiveSpendersSwingWorker();
            showTopFiveSpendersSwingWorker.execute();
        }
    }
    
    private class ShowTopFiveSpendersSwingWorker extends SwingWorker<List<String[]>, Object>{

        @Override
        protected List<String[]> doInBackground() throws Exception {
            ReservationManager reservationManager = new ReservationManagerImpl(dataSource, new TimeManagerImpl());            
            ReservationsTableModel reservationsTableModel = (ReservationsTableModel)jTableReservations.getModel();
            Locale locale = Locale.getDefault();
            NumberFormat numFormat = NumberFormat.getCurrencyInstance(locale);
            List<Reservation> topSpenders = reservationManager.findTopFiveSpenders();
            List<String[]> retTopSpenders = new ArrayList<>();
            
            for(Reservation topSpender : topSpenders){
                String[] tableTops = {String.valueOf(reservationsTableModel.getIndexOf(topSpender)+1),
                                      topSpender.getRoom().getNumber(),
                                      topSpender.getGuest().getName(),
                                      numFormat.format(topSpender.getServicesSpendings())};
                retTopSpenders.add(tableTops);
            }
            
            return retTopSpenders;
        }
        
        @Override
        protected void done(){
            showTopFiveSpendersSwingWorker = null;
            TopFiveSpendersTableModel topFiveSpendersTableModel = (TopFiveSpendersTableModel)jTableTopFiveSpenders.getModel();
            List<String[]> topFiveSpenders = null;
            
            topFiveSpendersTableModel.removeAllTopFiveSpendersOnlyVisually();
            
            try {
                topFiveSpenders = get();
            } catch (InterruptedException ex) {
                throw new RuntimeException("Operation interrupted (this should never happen)",ex);
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "ExecutionException thrown in method 'doInBackground' in class 'ShowFutureReservationsSwingWorker': ", ex);
                JOptionPane.showMessageDialog(null, resourceBundle.getString("Top5Spenders_ukaz_data_chyba"),
                                              resourceBundle.getString("Interni_chyba"), JOptionPane.ERROR_MESSAGE);
            }
            
            if(topFiveSpenders != null && !topFiveSpenders.isEmpty()){
                for(String[] topFiveSpender : topFiveSpenders){
                    topFiveSpendersTableModel.addTopFiveSpender(topFiveSpender);
                }
            }
        }
    }
}
